{"version":3,"file":"static/js/111.d9a915d3.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTarget.ts","../node_modules/pixi.js/src/rendering/high-shader/shader-bits/textureBit.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/ensureAttributes.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/utils/getCanvasTexture.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uboSyncFunctions.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/RenderTargetSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/isRenderingToScreen.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/renderTarget/calculateProjection.ts","../node_modules/pixi.js/src/rendering/renderers/gpu/state/GpuStencilModesToPixi.ts","../node_modules/pixi.js/src/scene/container/CustomRenderPipe.ts","../node_modules/pixi.js/src/scene/container/utils/executeInstructions.ts","../node_modules/pixi.js/src/scene/container/RenderGroupPipe.ts","../node_modules/pixi.js/src/scene/container/utils/buildInstructions.ts","../node_modules/pixi.js/src/scene/container/utils/clearList.ts","../node_modules/pixi.js/src/scene/container/utils/collectRenderGroups.ts","../node_modules/pixi.js/src/scene/container/utils/mixColors.ts","../node_modules/pixi.js/src/scene/container/utils/mixHexColors.ts","../node_modules/pixi.js/src/scene/container/utils/updateRenderGroupTransforms.ts","../node_modules/pixi.js/src/scene/container/utils/validateRenderables.ts","../node_modules/pixi.js/src/scene/container/RenderGroupSystem.ts","../node_modules/pixi.js/src/scene/sprite/SpritePipe.ts","../node_modules/pixi.js/src/rendering/batcher/shared/BatcherPipe.ts","../node_modules/pixi.js/src/filters/mask/MaskFilter.ts","../node_modules/pixi.js/src/rendering/mask/alpha/AlphaMaskPipe.ts","../node_modules/pixi.js/src/rendering/mask/color/ColorMaskPipe.ts","../node_modules/pixi.js/src/rendering/mask/stencil/StencilMaskPipe.ts","../node_modules/pixi.js/src/rendering/renderers/shared/background/BackgroundSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/blendModes/BlendModePipe.ts","../node_modules/pixi.js/src/rendering/renderers/shared/extract/ExtractSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/RenderTexture.ts","../node_modules/pixi.js/src/rendering/renderers/shared/extract/GenerateTextureSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/renderTarget/GlobalUniformSystem.ts","../node_modules/pixi.js/src/utils/sayHello.ts","../node_modules/pixi.js/src/rendering/renderers/shared/startup/HelloSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/texture/TextureGCSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/view/ViewSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/system/SharedSystems.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/createUboSyncFunction.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/utils/uniformParsers.ts","../node_modules/pixi.js/src/rendering/renderers/shared/shader/UboSystem.ts","../node_modules/pixi.js/src/rendering/renderers/shared/buffer/BufferResource.ts"],"sourcesContent":["// what we are building is a platform and a framework.\n// import { Matrix } from '../../shared/maths/Matrix';\nimport { uid } from '../../../../utils/data/uid';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\n\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * Options for creating a render target.\n * @memberof rendering\n */\nexport interface RenderTargetOptions\n{\n    /** the width of the RenderTarget */\n    width?: number;\n    /** the height of the RenderTarget */\n    height?: number;\n    /** the resolution of the RenderTarget */\n    resolution?: number;\n    /** an array of textures, or a number indicating how many color textures there should be */\n    colorTextures?: BindableTexture[] | number;\n    /** should this render target have a stencil buffer? */\n    stencil?: boolean;\n    /** should this render target have a depth buffer? */\n    depth?: boolean;\n    /** a depth stencil texture that the depth and stencil outputs will be written to */\n    depthStencilTexture?: BindableTexture | boolean;\n    /** should this render target be antialiased? */\n    antialias?: boolean;\n    /** is this a root element, true if this is gl context owners render target */\n    isRoot?: boolean;\n}\n\n/**\n * A class that describes what the renderers are rendering to.\n * This can be as simple as a Texture, or as complex as a multi-texture, multi-sampled render target.\n * Support for stencil and depth buffers is also included.\n *\n * If you need something more complex than a Texture to render to, you should use this class.\n * Under the hood, all textures you render to have a RenderTarget created on their behalf.\n * @memberof rendering\n */\nexport class RenderTarget\n{\n    /** The default options for a render target */\n    public static defaultOptions: RenderTargetOptions = {\n        /** the width of the RenderTarget */\n        width: 0,\n        /** the height of the RenderTarget */\n        height: 0,\n        /** the resolution of the RenderTarget */\n        resolution: 1,\n        /** an array of textures, or a number indicating how many color textures there should be */\n        colorTextures: 1,\n        /** should this render target have a stencil buffer? */\n        stencil: false,\n        /** should this render target have a depth buffer? */\n        depth: false,\n        /** should this render target be antialiased? */\n        antialias: false, // save on perf by default!\n        /** is this a root element, true if this is gl context owners render target */\n        isRoot: false\n    };\n\n    /** unique id for this render target */\n    public readonly uid: number = uid('renderTarget');\n\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    public colorTextures: TextureSource[] = [];\n    /** the stencil and depth buffer will right to this texture in WebGPU */\n    public depthStencilTexture: TextureSource;\n    /** if true, will ensure a stencil buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public stencil: boolean;\n    /** if true, will ensure a depth buffer is added. For WebGPU, this will automatically create a depthStencilTexture */\n    public depth: boolean;\n\n    public dirtyId = 0;\n    public isRoot = false;\n\n    private readonly _size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    private readonly _managedColorTextures: boolean = false;\n\n    /**\n     * @param [descriptor] - Options for creating a render target.\n     */\n    constructor(descriptor: RenderTargetOptions = {})\n    {\n        descriptor = { ...RenderTarget.defaultOptions, ...descriptor };\n\n        this.stencil = descriptor.stencil;\n        this.depth = descriptor.depth;\n        this.isRoot = descriptor.isRoot;\n\n        if (typeof descriptor.colorTextures === 'number')\n        {\n            this._managedColorTextures = true;\n\n            for (let i = 0; i < descriptor.colorTextures; i++)\n            {\n                this.colorTextures.push(new TextureSource({\n                    width: descriptor.width,\n                    height: descriptor.height,\n                    resolution: descriptor.resolution,\n                    antialias: descriptor.antialias,\n                })\n                );\n            }\n        }\n        else\n        {\n            this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n\n            const colorSource = this.colorTexture.source;\n\n            this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n        }\n\n        // the first color texture drives the size of all others..\n        this.colorTexture.source.on('resize', this.onSourceResize, this);\n\n        // TODO should listen for texture destroyed?\n\n        if (descriptor.depthStencilTexture || this.stencil)\n        {\n            // TODO add a test\n            if (descriptor.depthStencilTexture instanceof Texture\n                || descriptor.depthStencilTexture instanceof TextureSource)\n            {\n                this.depthStencilTexture = descriptor.depthStencilTexture.source;\n            }\n            else\n            {\n                this.ensureDepthStencilTexture();\n            }\n        }\n    }\n\n    get size(): [number, number]\n    {\n        const _size = this._size;\n\n        _size[0] = this.pixelWidth;\n        _size[1] = this.pixelHeight;\n\n        return _size as any as [number, number];\n    }\n\n    get width(): number\n    {\n        return this.colorTexture.source.width;\n    }\n\n    get height(): number\n    {\n        return this.colorTexture.source.height;\n    }\n    get pixelWidth(): number\n    {\n        return this.colorTexture.source.pixelWidth;\n    }\n\n    get pixelHeight(): number\n    {\n        return this.colorTexture.source.pixelHeight;\n    }\n\n    get resolution(): number\n    {\n        return this.colorTexture.source._resolution;\n    }\n\n    get colorTexture(): TextureSource\n    {\n        return this.colorTextures[0];\n    }\n\n    protected onSourceResize(source: TextureSource)\n    {\n        this.resize(source.width, source.height, source._resolution, true);\n    }\n\n    /**\n     * This will ensure a depthStencil texture is created for this render target.\n     * Most likely called by the mask system to make sure we have stencil buffer added.\n     * @internal\n     * @ignore\n     */\n    public ensureDepthStencilTexture()\n    {\n        if (!this.depthStencilTexture)\n        {\n            this.depthStencilTexture = new TextureSource({\n                width: this.width,\n                height: this.height,\n                resolution: this.resolution,\n                format: 'depth24plus-stencil8',\n                autoGenerateMipmaps: false,\n                antialias: false,\n                mipLevelCount: 1,\n                // sampleCount: handled by the render target system..\n            });\n        }\n    }\n\n    public resize(width: number, height: number, resolution = this.resolution, skipColorTexture = false)\n    {\n        this.dirtyId++;\n\n        this.colorTextures.forEach((colorTexture, i) =>\n        {\n            if (skipColorTexture && i === 0) return;\n\n            colorTexture.source.resize(width, height, resolution);\n        });\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.source.resize(width, height, resolution);\n        }\n    }\n\n    public destroy()\n    {\n        this.colorTexture.source.off('resize', this.onSourceResize, this);\n\n        if (this._managedColorTextures)\n        {\n            this.colorTextures.forEach((texture) =>\n            {\n                texture.destroy();\n            });\n        }\n\n        if (this.depthStencilTexture)\n        {\n            this.depthStencilTexture.destroy();\n            delete this.depthStencilTexture;\n        }\n    }\n}\n","export const textureBit = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* wgsl */`\n\n        struct TextureUniforms {\n            uTextureMatrix:mat3x3<f32>,\n        }\n\n        @group(2) @binding(2) var<uniform> textureUniforms : TextureUniforms;\n        `,\n        main: /* wgsl */`\n            uv = (textureUniforms.uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* wgsl */`\n            @group(2) @binding(0) var uTexture: texture_2d<f32>;\n            @group(2) @binding(1) var uSampler: sampler;\n\n         \n        `,\n        main: /* wgsl */`\n            outColor = textureSample(uTexture, uSampler, vUV);\n        `\n    }\n};\n\nexport const textureBitGl = {\n    name: 'texture-bit',\n    vertex: {\n        header: /* glsl */`\n            uniform mat3 uTextureMatrix;\n        `,\n        main: /* glsl */`\n            uv = (uTextureMatrix * vec3(uv, 1.0)).xy;\n        `\n    },\n    fragment: {\n        header: /* glsl */`\n        uniform sampler2D uTexture;\n\n         \n        `,\n        main: /* glsl */`\n            outColor = texture(uTexture, vUV);\n        `\n    }\n};\n\n","import { warn } from '../../../../../utils/logging/warn';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\n\nimport type { Geometry } from '../../../shared/geometry/Geometry';\nimport type { ExtractedAttributeData } from './extractAttributesFromGlProgram';\n\n/**\n * This function looks at the attribute information provided to the geometry and attempts\n * to fill in an gaps. WE do this by looking at the extracted data from the shader and\n * making best guesses.\n *\n * Most of th etime users don't need to provide all the attribute info beyond the data itself, so we\n * can fill in the gaps for them. If you are using attributes in a more advanced way, you can\n * don't forget to add all the info at creation!\n * @param geometry - the geometry to ensure attributes for\n * @param extractedData - the extracted data from the shader\n */\nexport function ensureAttributes(\n    geometry: Geometry,\n    extractedData: Record<string, ExtractedAttributeData>\n): void\n{\n    for (const i in geometry.attributes)\n    {\n        const attribute = geometry.attributes[i];\n        const attributeData = extractedData[i];\n\n        if (attributeData)\n        {\n            attribute.location ??= attributeData.location;\n            attribute.format ??= attributeData.format;\n            attribute.offset ??= attributeData.offset;\n            attribute.instance ??= attributeData.instance;\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n        }\n    }\n\n    ensureStartAndStride(geometry);\n}\n\nfunction ensureStartAndStride(geometry: Geometry): void\n{\n    const { buffers, attributes } = geometry;\n\n    const tempStride: Record<string, number> = {};\n    const tempStart: Record<string, number> = {};\n\n    for (const j in buffers)\n    {\n        const buffer = buffers[j];\n\n        tempStride[buffer.uid] = 0;\n        tempStart[buffer.uid] = 0;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n\n    for (const j in attributes)\n    {\n        const attribute = attributes[j];\n\n        attribute.stride ??= tempStride[attribute.buffer.uid];\n\n        attribute.start ??= tempStart[attribute.buffer.uid];\n\n        tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n    }\n}\n","import { CanvasSource } from '../sources/CanvasSource';\nimport { Texture } from '../Texture';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { CanvasSourceOptions } from '../sources/CanvasSource';\n\nconst canvasCache: Map<ICanvas, Texture> = new Map();\n\nexport function getCanvasTexture(canvas: ICanvas, options?: CanvasSourceOptions): Texture\n{\n    if (!canvasCache.has(canvas))\n    {\n        const texture = new Texture({\n            source: new CanvasSource({\n                resource: canvas,\n                ...options,\n            })\n        });\n\n        const onDestroy = () =>\n        {\n            if (canvasCache.get(canvas) === texture)\n            {\n                canvasCache.delete(canvas);\n            }\n        };\n\n        texture.once('destroy', onDestroy);\n        texture.source.once('destroy', onDestroy);\n\n        canvasCache.set(canvas, texture);\n    }\n\n    return canvasCache.get(canvas);\n}\n\nexport function hasCachedCanvasTexture(canvas: ICanvas): boolean\n{\n    return canvasCache.has(canvas);\n}\n","import type { UNIFORM_TYPES_SINGLE } from '../types';\n\nfunction loopMatrix(col: number, row: number)\n{\n    const total = col * row;\n\n    return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\n\nexport const uboSyncFunctionsSTD40: Record<UNIFORM_TYPES_SINGLE, string> = {\n    f32: `\n        data[offset] = v;`,\n    i32: `\n        data[offset] = v;`,\n    'vec2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n    'vec3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n    'vec4<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n    'mat3x3<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n    'mat4x4<f32>': `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n    'mat3x2<f32>': loopMatrix(3, 2),\n    'mat4x2<f32>': loopMatrix(4, 2),\n    'mat2x3<f32>': loopMatrix(2, 3),\n    'mat4x3<f32>': loopMatrix(4, 3),\n    'mat2x4<f32>': loopMatrix(2, 4),\n    'mat3x4<f32>': loopMatrix(3, 4),\n};\n\nexport const uboSyncFunctionsWGSL: Record<UNIFORM_TYPES_SINGLE, string> = {\n    ...uboSyncFunctionsSTD40,\n    'mat2x2<f32>': `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `,\n};\n","import { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { CLEAR } from '../../gl/const';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection';\nimport { SystemRunner } from '../system/SystemRunner';\nimport { CanvasSource } from '../texture/sources/CanvasSource';\nimport { TextureSource } from '../texture/sources/TextureSource';\nimport { Texture } from '../texture/Texture';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\nimport { isRenderingToScreen } from './isRenderingToScreen';\nimport { RenderTarget } from './RenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { CLEAR_OR_BOOL } from '../../gl/const';\nimport type { GlRenderTarget } from '../../gl/GlRenderTarget';\nimport type { GpuRenderTarget } from '../../gpu/renderTarget/GpuRenderTarget';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { BindableTexture } from '../texture/Texture';\n\n/**\n * A render surface is a texture, canvas, or render target\n * @memberof rendering\n * @see environment.ICanvas\n * @see rendering.Texture\n * @see rendering.RenderTarget\n */\nexport type RenderSurface = ICanvas | BindableTexture | RenderTarget;\n\n/**\n * stores a render target and its frame\n * @ignore\n */\ninterface RenderTargetAndFrame\n{\n    /** the render target */\n    renderTarget: RenderTarget;\n    /** the frame to use when using the render target */\n    frame: Rectangle\n}\n\n/**\n * An adaptor interface for RenderTargetSystem to support WebGL and WebGPU.\n * This is used internally by the renderer, and is not intended to be used directly.\n * @ignore\n */\nexport interface RenderTargetAdaptor<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget>\n{\n    init(\n        /** the renderer */\n        renderer: Renderer,\n        /** the render target system */\n        renderTargetSystem: RenderTargetSystem<RENDER_TARGET>\n    ): void\n\n    /** A function copies the contents of a render surface to a texture */\n    copyToTexture(\n        /** the render surface to copy from  */\n        sourceRenderSurfaceTexture: RenderTarget,\n        /** the texture to copy to */\n        destinationTexture: Texture,\n        /** the origin of the copy */\n        originSrc: { x: number; y: number },\n        /** the size of the copy */\n        size: { width: number; height: number },\n        /** the destination origin (top left to paste from!) */\n        originDest?: { x: number; y: number },\n    ): Texture\n\n    /** starts a render pass on the render target */\n    startRenderPass(\n        /** the render target to start the render pass on */\n        renderTarget: RenderTarget,\n        /* the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111* */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** clears the current render target to the specified color */\n    clear(\n        /** the render target to clear */\n        renderTarget: RenderTarget,\n        /** the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111 */\n        clear: CLEAR_OR_BOOL,\n        /** the color to clear to   */\n        clearColor?: RgbaArray,\n        /** the viewport to use */\n        viewport?: Rectangle\n    ): void\n\n    /** finishes the current render pass */\n    finishRenderPass(renderTarget: RenderTarget): void\n\n    /**\n     * initializes a gpu render target. Both renderers use this function to initialize a gpu render target\n     * Its different type of object depending on the renderer.\n     */\n    initGpuRenderTarget(\n        /** the render target to initialize */\n        renderTarget: RenderTarget\n    ): RENDER_TARGET\n\n    /** called when a render target is resized */\n    resizeGpuRenderTarget(\n        /** the render target to resize */\n        renderTarget: RenderTarget\n    ): void\n\n    /** destroys the gpu render target */\n    destroyGpuRenderTarget(\n        /** the render target to destroy */\n        gpuRenderTarget: RENDER_TARGET\n    ): void\n}\n\n/**\n * A system that manages render targets. A render target is essentially a place where the shaders can color in the pixels.\n * The render target system is responsible for binding the render target to the renderer, and managing the viewport.\n * Render targets can be pushed and popped.\n *\n * To make it easier, you can also bind textures and canvases too. This will automatically create a render target for you.\n * The render target itself is a lot more powerful than just a texture or canvas,\n * as it can have multiple textures attached to it.\n * It will also give ou fine grain control over the stencil buffer / depth texture.\n * @example\n *\n * ```js\n *\n * // create a render target\n * const renderTarget = new RenderTarget({\n *   colorTextures: [new TextureSource({ width: 100, height: 100 })],\n * });\n *\n * // bind the render target\n * renderer.renderTarget.bind(renderTarget);\n *\n * // draw something!\n * ```\n * @memberof rendering\n */\nexport class RenderTargetSystem<RENDER_TARGET extends GlRenderTarget | GpuRenderTarget> implements System\n{\n    /** When rendering of a scene begins, this is where the root render surface is stored */\n    public rootRenderTarget: RenderTarget;\n    /** This is the root viewport for the render pass*/\n    public rootViewPort = new Rectangle();\n    /** A boolean that lets the dev know if the current render pass is rendering to the screen. Used by some plugins */\n    public renderingToScreen: boolean;\n    /** the current active render target */\n    public renderTarget: RenderTarget;\n    /** the current active render surface that the render target is created from */\n    public renderSurface: RenderSurface;\n    /** the current viewport that the gpu is using */\n    public readonly viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    public readonly onRenderTargetChange = new SystemRunner('onRenderTargetChange');\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    public readonly projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    public readonly defaultClearColor: RgbaArray = [0, 0, 0, 0];\n    /** a reference to the adaptor that interfaces with WebGL / WebGP */\n    public readonly adaptor: RenderTargetAdaptor<RENDER_TARGET>;\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    private readonly _renderSurfaceToRenderTargetHash: Map<RenderSurface, RenderTarget>\n        = new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    private _gpuRenderTargetHash: Record<number, RENDER_TARGET> = Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    private readonly _renderTargetStack: RenderTargetAndFrame[] = [];\n    /** A reference to the renderer */\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /** called when dev wants to finish a render pass */\n    public finishRenderPass()\n    {\n        this.adaptor.finishRenderPass(this.renderTarget);\n    }\n\n    /**\n     * called when the renderer starts to render a scene.\n     * @param options\n     * @param options.target - the render target to render to\n     * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param options.clearColor - the color to clear to\n     * @param options.frame - the frame to render to\n     */\n    public renderStart({\n        target,\n        clear,\n        clearColor,\n        frame\n    }: {\n        target: RenderSurface;\n        clear: CLEAR_OR_BOOL;\n        clearColor: RgbaArray;\n        frame?: Rectangle\n    }): void\n    {\n        // TODO no need to reset this - use optimised index instead\n        this._renderTargetStack.length = 0;\n\n        this.push(\n            target,\n            clear,\n            clearColor,\n            frame\n        );\n\n        this.rootViewPort.copyFrom(this.viewport);\n        this.rootRenderTarget = this.renderTarget;\n        this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    }\n\n    /**\n     * Binding a render surface! This is the main function of the render target system.\n     * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n     * Once bound all draw calls will be rendered to the render surface.\n     *\n     * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n     * @param renderSurface - the render surface to bind\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to render to\n     * @returns the render target that was bound\n     */\n    public bind(\n        renderSurface: RenderSurface,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    ): RenderTarget\n    {\n        const renderTarget = this.getRenderTarget(renderSurface);\n\n        const didChange = this.renderTarget !== renderTarget;\n\n        this.renderTarget = renderTarget;\n        this.renderSurface = renderSurface;\n\n        const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n\n        if (renderTarget.pixelWidth !== gpuRenderTarget.width\n            || renderTarget.pixelHeight !== gpuRenderTarget.height)\n        {\n            this.adaptor.resizeGpuRenderTarget(renderTarget);\n\n            gpuRenderTarget.width = renderTarget.pixelWidth;\n            gpuRenderTarget.height = renderTarget.pixelHeight;\n        }\n\n        const source = renderTarget.colorTexture;\n        const viewport = this.viewport;\n\n        const pixelWidth = source.pixelWidth;\n        const pixelHeight = source.pixelHeight;\n\n        if (!frame && renderSurface instanceof Texture)\n        {\n            frame = renderSurface.frame;\n        }\n\n        if (frame)\n        {\n            const resolution = source._resolution;\n\n            viewport.x = ((frame.x * resolution) + 0.5) | 0;\n            viewport.y = ((frame.y * resolution) + 0.5) | 0;\n            viewport.width = ((frame.width * resolution) + 0.5) | 0;\n            viewport.height = ((frame.height * resolution) + 0.5) | 0;\n        }\n        else\n        {\n            viewport.x = 0;\n            viewport.y = 0;\n            viewport.width = pixelWidth;\n            viewport.height = pixelHeight;\n        }\n\n        calculateProjection(\n            this.projectionMatrix,\n            0, 0,\n            viewport.width / source.resolution,\n            viewport.height / source.resolution,\n            !renderTarget.isRoot\n        );\n\n        this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n\n        if (didChange)\n        {\n            this.onRenderTargetChange.emit(renderTarget);\n        }\n\n        return renderTarget;\n    }\n\n    public clear(\n        target?: RenderSurface,\n        clear: CLEAR_OR_BOOL = CLEAR.ALL,\n        clearColor?: RgbaArray,\n    )\n    {\n        if (!clear) return;\n\n        if (target)\n        {\n            target = this.getRenderTarget(target);\n        }\n\n        this.adaptor.clear(\n            (target as RenderTarget) || this.renderTarget,\n            clear,\n            clearColor,\n            this.viewport\n        );\n    }\n\n    protected contextChange(): void\n    {\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    /**\n     * Push a render surface to the renderer. This will bind the render surface to the renderer,\n     * @param renderSurface - the render surface to push\n     * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n     * @param clearColor - the color to clear to\n     * @param frame - the frame to use when rendering to the render surface\n     */\n    public push(\n        renderSurface: RenderSurface,\n        clear: CLEAR | boolean = CLEAR.ALL,\n        clearColor?: RgbaArray,\n        frame?: Rectangle\n    )\n    {\n        const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n\n        this._renderTargetStack.push({\n            renderTarget,\n            frame,\n        });\n\n        return renderTarget;\n    }\n\n    /** Pops the current render target from the renderer and restores the previous render target. */\n    public pop()\n    {\n        this._renderTargetStack.pop();\n\n        const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n\n        this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n    }\n\n    /**\n     * Gets the render target from the provide render surface. Eg if its a texture,\n     * it will return the render target for the texture.\n     * If its a render target, it will return the same render target.\n     * @param renderSurface - the render surface to get the render target for\n     * @returns the render target for the render surface\n     */\n    public getRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        if (((renderSurface as Texture).isTexture))\n        {\n            renderSurface = (renderSurface as Texture).source;\n        }\n\n        return this._renderSurfaceToRenderTargetHash.get(renderSurface)\n        ?? this._initRenderTarget(renderSurface);\n    }\n\n    /**\n     * Copies a render surface to another texture\n     * @param sourceRenderSurfaceTexture - the render surface to copy from\n     * @param destinationTexture - the texture to copy to\n     * @param originSrc - the origin of the copy\n     * @param originSrc.x - the x origin of the copy\n     * @param originSrc.y - the y origin of the copy\n     * @param size - the size of the copy\n     * @param size.width - the width of the copy\n     * @param size.height - the height of the copy\n     * @param originDest - the destination origin (top left to paste from!)\n     * @param originDest.x - the x origin of the paste\n     * @param originDest.y - the y origin of the paste\n     */\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number },\n        size: { width: number; height: number },\n        originDest: { x: number; y: number; },\n    )\n    {\n        // fit the size to the source we don't want to go out of bounds\n\n        if (originSrc.x < 0)\n        {\n            size.width += originSrc.x;\n            originDest.x -= originSrc.x;\n            originSrc.x = 0;\n        }\n\n        if (originSrc.y < 0)\n        {\n            size.height += originSrc.y;\n            originDest.y -= originSrc.y;\n            originSrc.y = 0;\n        }\n\n        const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n\n        size.width = Math.min(size.width, pixelWidth - originSrc.x);\n        size.height = Math.min(size.height, pixelHeight - originSrc.y);\n\n        return this.adaptor.copyToTexture(\n            sourceRenderSurfaceTexture,\n            destinationTexture,\n            originSrc,\n            size,\n            originDest\n        );\n    }\n\n    /**\n     * ensures that we have a depth stencil buffer available to render to\n     * This is used by the mask system to make sure we have a stencil buffer.\n     */\n    public ensureDepthStencil()\n    {\n        if (!this.renderTarget.stencil)\n        {\n            this.renderTarget.stencil = true;\n\n            this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n        }\n    }\n\n    /** nukes the render target system */\n    public destroy()\n    {\n        (this._renderer as null) = null;\n\n        this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) =>\n        {\n            if (renderTarget !== key)\n            {\n                renderTarget.destroy();\n            }\n        });\n\n        this._renderSurfaceToRenderTargetHash.clear();\n\n        this._gpuRenderTargetHash = Object.create(null);\n    }\n\n    private _initRenderTarget(renderSurface: RenderSurface): RenderTarget\n    {\n        let renderTarget: RenderTarget = null;\n\n        if (CanvasSource.test(renderSurface))\n        {\n            renderSurface = getCanvasTexture(renderSurface as ICanvas).source;\n        }\n\n        if (renderSurface instanceof RenderTarget)\n        {\n            renderTarget = renderSurface;\n        }\n        else if (renderSurface instanceof TextureSource)\n        {\n            renderTarget = new RenderTarget({\n                colorTextures: [renderSurface],\n            });\n\n            if (CanvasSource.test(renderSurface.source.resource))\n            {\n                renderTarget.isRoot = true;\n            }\n\n            // TODO add a test for this\n            renderSurface.once('destroy', () =>\n            {\n                renderTarget.destroy();\n\n                const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n\n                if (gpuRenderTarget)\n                {\n                    this._gpuRenderTargetHash[renderTarget.uid] = null;\n                    this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n                }\n            });\n        }\n\n        this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n\n        return renderTarget;\n    }\n\n    public getGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        return this._gpuRenderTargetHash[renderTarget.uid]\n        || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n    }\n}\n","import type { RenderTarget } from './RenderTarget';\n\n/**\n * Checks if the render target is viewable on the screen\n * Basically, is it a canvas element and is that canvas element in the DOM\n * @param renderTarget - the render target to check\n * @returns true if the render target is viewable on the screen\n */\nexport function isRenderingToScreen(renderTarget: RenderTarget): boolean\n{\n    const resource = renderTarget.colorTexture.source.resource;\n\n    return ((globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement) && document.body.contains(resource));\n}\n","import type { Matrix } from '../../../../maths/matrix/Matrix';\n\nexport function calculateProjection(\n    pm: Matrix,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    flipY: boolean\n): Matrix\n{\n    const sign = flipY ? 1 : -1;\n\n    pm.identity();\n\n    pm.a = (1 / width * 2);\n    pm.d = sign * (1 / height * 2);\n\n    pm.tx = -1 - (x * pm.a);\n    pm.ty = -sign - (y * pm.d);\n\n    return pm;\n}\n","import { STENCIL_MODES } from '../../shared/state/const';\n\nexport interface StencilState\n{\n    stencilWriteMask?: number\n    stencilReadMask?: number;\n    stencilFront?: {\n        compare: 'always' | 'equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep';\n    },\n    stencilBack?: {\n        compare: 'always' | 'equal';\n        passOp: 'increment-clamp' | 'decrement-clamp' | 'keep';\n    }\n}\n\nexport const GpuStencilModesToPixi: StencilState[] = [];\n\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = undefined;\n\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n    stencilWriteMask: 0,\n    stencilReadMask: 0,\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'increment-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'decrement-clamp',\n    },\n};\n\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n    stencilWriteMask: 0,\n    stencilFront: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n    stencilBack: {\n        compare: 'equal',\n        passOp: 'keep',\n    },\n};\n","import { ExtensionType } from '../../extensions/Extensions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderContainer } from './RenderContainer';\n\n/**\n * The CustomRenderPipe is a render pipe that allows for custom rendering logic for your renderable objects.\n * @example\n * import { RenderContainer } from 'pixi.js';\n *\n * const renderContainer = new RenderContainer(\n * (renderer) =>  {\n *     renderer.clear({\n *       clearColor: 'green', // clear the screen to green when rendering this item\n *     });\n * })\n * @memberof rendering\n */\nexport class CustomRenderPipe implements InstructionPipe<RenderContainer>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'customRender',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(container: RenderContainer, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(container);\n    }\n\n    public execute(container: RenderContainer)\n    {\n        if (!container.isRenderable) return;\n\n        container.render(this._renderer);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import type { InstructionPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function executeInstructions(renderGroup: RenderGroup, renderer: RenderPipes)\n{\n    const instructionSet = renderGroup.instructionSet;\n    const instructions = instructionSet.instructions;\n\n    for (let i = 0; i < instructionSet.instructionSize; i++)\n    {\n        const instruction = instructions[i];\n\n        (renderer[instruction.renderPipeId as keyof RenderPipes] as InstructionPipe<any>).execute(instruction);\n    }\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { executeInstructions } from './utils/executeInstructions';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { RenderGroup } from './RenderGroup';\n\nexport class RenderGroupPipe implements InstructionPipe<RenderGroup>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderGroup(renderGroup: RenderGroup, instructionSet: InstructionSet): void\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add(renderGroup);\n    }\n\n    public execute(renderGroup: RenderGroup)\n    {\n        if (!renderGroup.isRenderable) return;\n\n        this._renderer.globalUniforms.push({\n            worldTransformMatrix: renderGroup.worldTransform,\n            worldColor: renderGroup.worldColorAlpha,\n        });\n\n        executeInstructions(renderGroup, this._renderer.renderPipes);\n\n        this._renderer.globalUniforms.pop();\n\n        // now render a quad..\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n    }\n}\n","import type { InstructionSet } from '../../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe, RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../../rendering/renderers/shared/Renderable';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { Container } from '../Container';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function buildInstructions(renderGroup: RenderGroup, renderPipes: RenderPipes)\n{\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n\n    instructionSet.reset();\n\n    // TODO add some events / runners for build start\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n\n    if (root.sortableChildren)\n    {\n        root.sortChildren();\n    }\n\n    collectAllRenderablesAdvanced(root, instructionSet, renderPipes, true);\n\n    // instructionSet.log();\n    // TODO add some events / runners for build end\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n\n    // instructionSet.log();\n}\n\nexport function collectAllRenderables(\n    container: Container,\n    instructionSet: InstructionSet,\n    rendererPipes: RenderPipes\n): void\n{\n    // if there is 0b01 or 0b10 the return value\n\n    if (container.globalDisplayStatus < 0b111 || !container.includeInBuild) return;\n\n    if (container.sortableChildren)\n    {\n        container.sortChildren();\n    }\n\n    if (container.isSimple)\n    {\n        collectAllRenderablesSimple(container, instructionSet, rendererPipes);\n    }\n    else\n    {\n        collectAllRenderablesAdvanced(container, instructionSet, rendererPipes, false);\n    }\n}\n\nfunction collectAllRenderablesSimple(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderPipes: RenderPipes\n): void\n{\n    if (container.renderPipeId)\n    {\n        // TODO add blends in\n        renderPipes.blendMode.setBlendMode(container as Renderable, container.groupBlendMode, instructionSet);\n\n        container.didViewUpdate = false;\n\n        const rp = renderPipes as unknown as Record<string, RenderPipe>;\n\n        rp[container.renderPipeId].addRenderable(container as Renderable, instructionSet);\n    }\n\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            collectAllRenderables(children[i], instructionSet, renderPipes);\n        }\n    }\n}\n\nfunction collectAllRenderablesAdvanced(\n    container: Container,\n    instructionSet: InstructionSet,\n    renderPipes: RenderPipes,\n    isRoot: boolean\n): void\n{\n    if (!isRoot && container.renderGroup)\n    {\n        renderPipes.renderGroup.addRenderGroup(container.renderGroup, instructionSet);\n    }\n    else\n    {\n        for (let i = 0; i < container.effects.length; i++)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.push(effect, container, instructionSet);\n        }\n\n        const renderPipeId = container.renderPipeId;\n\n        if (renderPipeId)\n        {\n            // TODO add blends in\n            renderPipes.blendMode.setBlendMode(container as Renderable, container.groupBlendMode, instructionSet);\n            container.didViewUpdate = false;\n\n            const pipe = renderPipes[renderPipeId as keyof RenderPipes]as RenderPipe<any>;\n\n            pipe.addRenderable(container, instructionSet);\n        }\n\n        const children = container.children;\n\n        if (children.length)\n        {\n            for (let i = 0; i < children.length; i++)\n            {\n                collectAllRenderables(children[i], instructionSet, renderPipes);\n            }\n        }\n\n        // loop backwards through effects\n        for (let i = container.effects.length - 1; i >= 0; i--)\n        {\n            const effect = container.effects[i];\n            const pipe = renderPipes[effect.pipe as keyof RenderPipes]as InstructionPipe<any>;\n\n            pipe.pop(effect, container, instructionSet);\n        }\n    }\n}\n\n","/**\n * nulls all slots in an array from a certain index.\n * assume that when a null item is hit, the rest are also null.\n * Which will be the case for where this is used!\n * @param list - the array to clean\n * @param index - the index to start from\n */\nexport function clearList(list: Array<unknown>, index?: number)\n{\n    index ||= 0;\n\n    for (let j = index; j < list.length; j++)\n    {\n        if (list[j])\n        {\n            list[j] = null;\n        }\n        else\n        {\n            break;\n        }\n    }\n}\n","import type { RenderGroup } from '../RenderGroup';\n\nexport function collectRenderGroups(renderGroup: RenderGroup, out: RenderGroup[] = [])\n{\n    out.push(renderGroup);\n\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n    {\n        collectRenderGroups(renderGroup.renderGroupChildren[i], out);\n    }\n\n    return out;\n}\n","import { mixHexColors } from './mixHexColors';\n\nconst WHITE_BGR = 0xFFFFFF;\n\nexport function mixColors(localBGRColor: number, parentBGRColor: number)\n{\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        return localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n\n    return mixHexColors(localBGRColor, parentBGRColor, 0.5);\n}\n\nexport function mixStandardAnd32BitColors(localColorRGB: number, localAlpha: number, parentColor: number)\n{\n    const parentAlpha = ((parentColor >> 24) & 0xFF) / 255;\n\n    const globalAlpha = ((localAlpha * parentAlpha) * 255);\n\n    // flip rgb to bgr\n    const localBGRColor = ((localColorRGB & 0xFF) << 16) + (localColorRGB & 0xFF00) + ((localColorRGB >> 16) & 0xFF);\n\n    const parentBGRColor = parentColor & 0x00FFFFFF;\n\n    let sharedBGRColor: number;\n\n    if (localBGRColor === WHITE_BGR || parentBGRColor === WHITE_BGR)\n    {\n        sharedBGRColor = localBGRColor + parentBGRColor - WHITE_BGR;\n    }\n    else\n    {\n        sharedBGRColor = mixHexColors(localBGRColor, parentBGRColor, 0.5);\n    }\n\n    return sharedBGRColor + (globalAlpha << 24);\n}\n","export function mixHexColors(color1: number, color2: number, ratio: number): number\n{\n    const r1 = (color1 >> 16) & 0xFF;\n    const g1 = (color1 >> 8) & 0xFF;\n    const b1 = color1 & 0xFF;\n\n    const r2 = (color2 >> 16) & 0xFF;\n    const g2 = (color2 >> 8) & 0xFF;\n    const b2 = color2 & 0xFF;\n\n    const r = r1 + ((r2 - r1) * ratio);\n    const g = g1 + ((g2 - g1) * ratio);\n    const b = b1 + ((b2 - b1) * ratio);\n\n    return (r << 16) + (g << 8) + b;\n}\n\n","import { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_VISIBLE } from '../Container';\nimport { clearList } from './clearList';\nimport { mixColors } from './mixColors';\n\nimport type { RenderGroup } from '../RenderGroup';\n\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\n\nexport function updateRenderGroupTransforms(renderGroup: RenderGroup, updateChildRenderGroups = false)\n{\n    updateRenderGroupTransform(renderGroup);\n\n    const childrenToUpdate = renderGroup.childrenToUpdate;\n\n    const updateTick = renderGroup.updateTick++;\n\n    for (const j in childrenToUpdate)\n    {\n        const renderGroupDepth = Number(j);\n\n        const childrenAtDepth = childrenToUpdate[j];\n\n        const list = childrenAtDepth.list;\n        const index = childrenAtDepth.index;\n\n        for (let i = 0; i < index; i++)\n        {\n            const child = list[i];\n\n            // check that these things match our layer and depth - if the renderGroup does not match,\n            // the child has been re-parented into another rendergroup since it asked to be updated so we can ignore it here\n            // secondly if the relativeRenderGroupDepth has changed, then the it means it will have been nested at a\n            // different different level in the render group - so we can wait for the update that does in fact match\n            if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth)\n            {\n                updateTransformAndChildren(child, updateTick, 0);\n            }\n        }\n\n        clearList(list, index);\n\n        childrenAtDepth.index = 0;\n    }\n\n    if (updateChildRenderGroups)\n    {\n        for (let i = 0; i < renderGroup.renderGroupChildren.length; i++)\n        {\n            updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n        }\n    }\n}\n\nexport function updateRenderGroupTransform(renderGroup: RenderGroup)\n{\n    const root = renderGroup.root;\n\n    let worldAlpha;\n\n    if (renderGroup.renderGroupParent)\n    {\n        const renderGroupParent = renderGroup.renderGroupParent;\n\n        renderGroup.worldTransform.appendFrom(\n            root.relativeGroupTransform,\n            renderGroupParent.worldTransform,\n        );\n\n        renderGroup.worldColor = mixColors(\n            root.groupColor,\n            renderGroupParent.worldColor,\n        );\n\n        worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n    }\n    else\n    {\n        renderGroup.worldTransform.copyFrom(root.localTransform);\n        renderGroup.worldColor = root.localColor;\n        worldAlpha = root.localAlpha;\n    }\n\n    // eslint-disable-next-line no-nested-ternary\n    worldAlpha = worldAlpha < 0 ? 0 : (worldAlpha > 1 ? 1 : worldAlpha);\n    renderGroup.worldAlpha = worldAlpha;\n\n    renderGroup.worldColorAlpha = renderGroup.worldColor\n            + (((worldAlpha * 255) | 0) << 24);\n}\n\nexport function updateTransformAndChildren(container: Container, updateTick: number, updateFlags: number)\n{\n    if (updateTick === container.updateTick) return;\n    container.updateTick = updateTick;\n\n    container.didChange = false;\n\n    const localTransform = container.localTransform;\n\n    container.updateLocalTransform();\n\n    const parent = container.parent;\n\n    if ((parent && !parent.renderGroup))\n    {\n        updateFlags = updateFlags | container._updateFlags;\n\n        container.relativeGroupTransform.appendFrom(\n            localTransform,\n            parent.relativeGroupTransform,\n        );\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, parent, updateFlags);\n        }\n    }\n    else\n    {\n        updateFlags = container._updateFlags;\n\n        container.relativeGroupTransform.copyFrom(localTransform);\n\n        if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE)\n        {\n            updateColorBlendVisibility(container, tempContainer, updateFlags);\n        }\n    }\n\n    // don't update children if its a layer..\n    if (!container.renderGroup)\n    {\n        const children = container.children;\n        const length = children.length;\n\n        for (let i = 0; i < length; i++)\n        {\n            updateTransformAndChildren(children[i], updateTick, updateFlags);\n        }\n\n        const renderGroup = container.parentRenderGroup;\n\n        if (container.renderPipeId && !renderGroup.structureDidChange)\n        {\n            renderGroup.updateRenderable(container);\n        }\n    }\n}\n\nfunction updateColorBlendVisibility(\n    container: Container,\n    parent: Container,\n    updateFlags: number,\n): void\n{\n    if (updateFlags & UPDATE_COLOR)\n    {\n        container.groupColor = mixColors(\n            container.localColor,\n            parent.groupColor\n        );\n\n        let groupAlpha = container.localAlpha * parent.groupAlpha;\n\n        // eslint-disable-next-line no-nested-ternary\n        groupAlpha = groupAlpha < 0 ? 0 : (groupAlpha > 1 ? 1 : groupAlpha);\n\n        container.groupAlpha = groupAlpha;\n        container.groupColorAlpha = container.groupColor + (((groupAlpha * 255) | 0) << 24);\n    }\n\n    if (updateFlags & UPDATE_BLEND)\n    {\n        container.groupBlendMode = container.localBlendMode === 'inherit' ? parent.groupBlendMode : container.localBlendMode;\n    }\n\n    if (updateFlags & UPDATE_VISIBLE)\n    {\n        container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n    }\n\n    container._updateFlags = 0;\n}\n\n","import type { RenderPipe } from '../../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { RenderPipes } from '../../../rendering/renderers/types';\nimport type { RenderGroup } from '../RenderGroup';\n\nexport function validateRenderables(renderGroup: RenderGroup, renderPipes: RenderPipes): boolean\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    let rebuildRequired = false;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        // note to self: there is no need to check if container.parentRenderGroup || !container.renderGroup\n        // exist here, as this function is only called if the structure did NOT change\n        // which means they have to be valid if this function is called\n\n        const renderable = container;\n        const pipe = renderPipes[renderable.renderPipeId as keyof RenderPipes] as RenderPipe<any>;\n\n        rebuildRequired = pipe.validateRenderable(container);\n\n        if (rebuildRequired)\n        {\n            break;\n        }\n    }\n\n    renderGroup.structureDidChange = rebuildRequired;\n\n    return rebuildRequired;\n}\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { Matrix } from '../../maths/matrix/Matrix';\nimport { buildInstructions } from './utils/buildInstructions';\nimport { clearList } from './utils/clearList';\nimport { collectRenderGroups } from './utils/collectRenderGroups';\nimport { executeInstructions } from './utils/executeInstructions';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms';\nimport { validateRenderables } from './utils/validateRenderables';\n\nimport type { WebGPURenderer } from '../../rendering/renderers/gpu/WebGPURenderer';\nimport type { System } from '../../rendering/renderers/shared/system/System';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { Container } from './Container';\nimport type { RenderGroup } from './RenderGroup';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class RenderGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'renderGroup',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected render({ container, transform }: {container: Container, transform: Matrix}): void\n    {\n        container.isRenderGroup = true;\n\n        const parent = container.parent;\n        const renderGroupParent = container.renderGroup.renderGroupParent;\n\n        container.parent = null;\n        container.renderGroup.renderGroupParent = null;\n\n        const renderer = this._renderer;\n\n        // collect all the renderGroups in the scene and then render them one by one..\n        const renderGroups = collectRenderGroups(container.renderGroup, []);\n\n        let originalLocalTransform: Matrix = tempMatrix;\n\n        if (transform)\n        {\n            originalLocalTransform = originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n            container.renderGroup.localTransform.copyFrom(transform);\n        }\n\n        const renderPipes = (renderer as WebGPURenderer).renderPipes;\n\n        for (let i = 0; i < renderGroups.length; i++)\n        {\n            const renderGroup = renderGroups[i];\n\n            renderGroup.runOnRender();\n\n            renderGroup.instructionSet.renderPipes = renderPipes;\n\n            if (!renderGroup.structureDidChange)\n            {\n                // phase 1 - validate all the renderables\n                validateRenderables(renderGroup, renderPipes);\n            }\n            else\n            {\n                clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n            }\n\n            // phase 2 - update all the transforms\n            // including updating the renderables..\n            updateRenderGroupTransforms(renderGroup);\n\n            if (renderGroup.structureDidChange)\n            {\n                renderGroup.structureDidChange = false;\n\n                // build the renderables\n                buildInstructions(renderGroup, renderPipes);\n            }\n            else\n            {\n                // update remaining renderables\n                updateRenderables(renderGroup);\n            }\n\n            // reset the renderables to update\n            renderGroup.childrenRenderablesToUpdate.index = 0;\n\n            // upload all the things!\n            renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n        }\n\n        renderer.globalUniforms.start({\n            worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n            worldColor: container.renderGroup.worldColorAlpha,\n\n        });\n\n        executeInstructions(container.renderGroup, renderPipes);\n\n        // TODO need to add some events / runners for things like this to hook up to\n        if (renderPipes.uniformBatch)\n        {\n            renderPipes.uniformBatch.renderEnd();\n        }\n\n        if (transform)\n        {\n            container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n        }\n\n        container.parent = parent;\n        container.renderGroup.renderGroupParent = renderGroupParent;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n\nfunction updateRenderables(renderGroup: RenderGroup)\n{\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n\n    for (let i = 0; i < index; i++)\n    {\n        const container = list[i];\n\n        if (container.didViewUpdate)\n        {\n            renderGroup.updateRenderable(container);\n        }\n    }\n\n    clearList(list, index);\n}\n\n","import { ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from './BatchableSprite';\n\nimport type { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { PoolItem } from '../../utils/pool/Pool';\nimport type { Sprite } from './Sprite';\n\nexport class SpritePipe implements RenderPipe<Sprite>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'sprite',\n    } as const;\n\n    private _renderer: Renderer;\n    private _gpuSpriteHash: Record<number, BatchableSprite> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public addRenderable(sprite: Sprite, _instructionSet: InstructionSet)\n    {\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        // TODO visibility\n        this._renderer.renderPipes.batch.addToBatch(gpuSprite);\n    }\n\n    public updateRenderable(sprite: Sprite)\n    {\n        const gpuSprite = this._gpuSpriteHash[sprite.uid];\n\n        if (sprite._didSpriteUpdate) this._updateBatchableSprite(sprite, gpuSprite);\n\n        gpuSprite.batcher.updateElement(gpuSprite);\n    }\n\n    public validateRenderable(sprite: Sprite): boolean\n    {\n        const texture = sprite._texture;\n        const gpuSprite = this._getGpuSprite(sprite);\n\n        if (gpuSprite.texture._source !== texture._source)\n        {\n            return !gpuSprite.batcher.checkAndUpdateTexture(gpuSprite, texture);\n        }\n\n        return false;\n    }\n\n    public destroyRenderable(sprite: Sprite)\n    {\n        const batchableSprite = this._gpuSpriteHash[sprite.uid];\n\n        // this will call reset!\n        BigPool.return(batchableSprite as PoolItem);\n\n        this._gpuSpriteHash[sprite.uid] = null;\n    }\n\n    private _updateBatchableSprite(sprite: Sprite, batchableSprite: BatchableSprite)\n    {\n        sprite._didSpriteUpdate = false;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.texture = sprite._texture;\n    }\n\n    private _getGpuSprite(sprite: Sprite): BatchableSprite\n    {\n        return this._gpuSpriteHash[sprite.uid] || this._initGPUSprite(sprite);\n    }\n\n    private _initGPUSprite(sprite: Sprite): BatchableSprite\n    {\n        const batchableSprite = BigPool.get(BatchableSprite);\n\n        batchableSprite.renderable = sprite;\n\n        batchableSprite.texture = sprite._texture;\n        batchableSprite.bounds = sprite.bounds;\n        batchableSprite.roundPixels = (this._renderer._roundPixels | sprite._roundPixels) as 0 | 1;\n\n        this._gpuSpriteHash[sprite.uid] = batchableSprite;\n\n        sprite._didSpriteUpdate = false;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        sprite.on('destroyed', () =>\n        {\n            this.destroyRenderable(sprite);\n        });\n\n        return batchableSprite;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuSpriteHash)\n        {\n            BigPool.return(this._gpuSpriteHash[i] as PoolItem);\n        }\n\n        this._gpuSpriteHash = null;\n        this._renderer = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { State } from '../../renderers/shared/state/State';\nimport { Batcher } from './Batcher';\nimport { BatchGeometry } from './BatchGeometry';\n\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { BatchPipe, InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { Batch, BatchableObject } from './Batcher';\n\nexport interface BatcherAdaptor\n{\n    start(batchPipe: BatcherPipe, geometry: Geometry): void\n    init(batchPipe: BatcherPipe): void;\n    execute(batchPipe: BatcherPipe, batch: Batch): void\n    destroy(): void;\n    contextChange?(): void;\n}\n\n// eslint-disable-next-line max-len\nexport class BatcherPipe implements InstructionPipe<Batch>, BatchPipe\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'batch',\n    } as const;\n\n    public state: State = State.for2d();\n    public renderer: Renderer;\n\n    private _batches: Record<number, Batcher> = Object.create(null);\n    private _geometries: Record<number, BatchGeometry> = Object.create(null);\n    private _adaptor: BatcherAdaptor;\n\n    private _activeBatch: Batcher;\n    private _activeGeometry: Geometry;\n\n    constructor(renderer: Renderer, adaptor: BatcherAdaptor)\n    {\n        this.renderer = renderer;\n        this._adaptor = adaptor;\n\n        this._adaptor.init(this);\n    }\n\n    public buildStart(instructionSet: InstructionSet)\n    {\n        if (!this._batches[instructionSet.uid])\n        {\n            const batcher = new Batcher();\n\n            this._batches[instructionSet.uid] = batcher;\n            this._geometries[batcher.uid] = new BatchGeometry();\n        }\n\n        this._activeBatch = this._batches[instructionSet.uid];\n        this._activeGeometry = this._geometries[this._activeBatch.uid];\n\n        this._activeBatch.begin();\n    }\n\n    public addToBatch(batchableObject: BatchableObject)\n    {\n        this._activeBatch.add(batchableObject);\n    }\n\n    public break(instructionSet: InstructionSet)\n    {\n        this._activeBatch.break(instructionSet);\n    }\n\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        const activeBatch = this._activeBatch;\n        const geometry = this._activeGeometry;\n\n        activeBatch.finish(instructionSet);\n\n        geometry.indexBuffer.setDataWithSize(activeBatch.indexBuffer, activeBatch.indexSize, true);\n\n        geometry.buffers[0].setDataWithSize(activeBatch.attributeBuffer.float32View, activeBatch.attributeSize, false);\n    }\n\n    public upload(instructionSet: InstructionSet)\n    {\n        const batcher = this._batches[instructionSet.uid];\n        const geometry = this._geometries[batcher.uid];\n\n        if (batcher.dirty)\n        {\n            batcher.dirty = false;\n            geometry.buffers[0].update(batcher.attributeSize * 4);\n        }\n    }\n\n    public execute(batch: Batch)\n    {\n        if (batch.action === 'startBatch')\n        {\n            const batcher = batch.batcher;\n            const geometry = this._geometries[batcher.uid];\n\n            this._adaptor.start(this, geometry);\n        }\n\n        this._adaptor.execute(this, batch);\n    }\n\n    public destroy()\n    {\n        this.state = null;\n        this.renderer = null;\n\n        this._adaptor.destroy();\n        this._adaptor = null;\n\n        for (const i in this._batches)\n        {\n            this._batches[i].destroy();\n        }\n\n        this._batches = null;\n\n        for (const i in this._geometries)\n        {\n            this._geometries[i].destroy();\n        }\n\n        this._geometries = null;\n    }\n}\n","import { Matrix } from '../../maths/matrix/Matrix';\nimport { GlProgram } from '../../rendering/renderers/gl/shader/GlProgram';\nimport { GpuProgram } from '../../rendering/renderers/gpu/shader/GpuProgram';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { TextureMatrix } from '../../rendering/renderers/shared/texture/TextureMatrix';\nimport { Filter } from '../Filter';\nimport fragment from './mask.frag';\nimport vertex from './mask.vert';\nimport source from './mask.wgsl';\n\nimport type { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport type { Sprite } from '../../scene/sprite/Sprite';\nimport type { FilterOptions } from '../Filter';\nimport type { FilterSystem } from '../FilterSystem';\n\nexport interface MaskFilterOptions extends FilterOptions\n{\n    sprite: Sprite,\n    scale?: number | { x: number, y: number },\n}\n\nexport class MaskFilter extends Filter\n{\n    public sprite: Sprite;\n    private readonly _textureMatrix: TextureMatrix;\n\n    constructor(options: MaskFilterOptions)\n    {\n        const { sprite, ...rest } = options;\n\n        const textureMatrix = new TextureMatrix(sprite.texture);\n\n        const filterUniforms = new UniformGroup({\n            uFilterMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uMaskClamp: { value: textureMatrix.uClampFrame, type: 'vec4<f32>' },\n            uAlpha: { value: 1, type: 'f32' },\n        });\n\n        const gpuProgram = GpuProgram.from({\n            vertex: {\n                source,\n                entryPoint: 'mainVertex',\n            },\n            fragment: {\n                source,\n                entryPoint: 'mainFragment',\n            },\n        });\n\n        const glProgram = GlProgram.from({\n            vertex,\n            fragment,\n            name: 'mask-filter',\n        });\n\n        super({\n            ...rest,\n            gpuProgram,\n            glProgram,\n            resources: {\n                filterUniforms,\n                uMaskTexture: sprite.texture.source,\n            },\n        });\n\n        this.sprite = sprite;\n\n        this._textureMatrix = textureMatrix;\n    }\n\n    public apply(\n        filterManager: FilterSystem,\n        input: Texture,\n        output: Texture,\n        clearMode: boolean\n    ): void\n    {\n        // will trigger an update if the texture changed..\n        this._textureMatrix.texture = this.sprite.texture;\n\n        filterManager.calculateSpriteMatrix(\n            this.resources.filterUniforms.uniforms.uFilterMatrix as Matrix,\n            this.sprite\n        ).prepend(this._textureMatrix.mapCoord);\n\n        this.resources.uMaskTexture = this.sprite.texture.source;\n\n        filterManager.applyFilter(this, input, output, clearMode);\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { FilterEffect } from '../../../filters/FilterEffect';\nimport { MaskFilter } from '../../../filters/mask/MaskFilter';\nimport { Bounds } from '../../../scene/container/bounds/Bounds';\nimport { getGlobalBounds } from '../../../scene/container/bounds/getGlobalBounds';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions';\nimport { Sprite } from '../../../scene/sprite/Sprite';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\nimport { Texture } from '../../renderers/shared/texture/Texture';\nimport { TexturePool } from '../../renderers/shared/texture/TexturePool';\nimport { RendererType } from '../../renderers/types';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { RenderTarget } from '../../renderers/shared/renderTarget/RenderTarget';\nimport type { Renderer } from '../../renderers/types';\nimport type { AlphaMask } from './AlphaMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nconst tempBounds = new Bounds();\n\nclass AlphaMaskEffect extends FilterEffect implements PoolItem\n{\n    constructor()\n    {\n        super();\n\n        this.filters = [new MaskFilter({\n            sprite: new Sprite(Texture.EMPTY),\n            resolution: 'inherit',\n            antialias: 'inherit'\n        })];\n    }\n\n    get sprite(): Sprite\n    {\n        return (this.filters[0] as MaskFilter).sprite;\n    }\n\n    set sprite(value: Sprite)\n    {\n        (this.filters[0] as MaskFilter).sprite = value;\n    }\n\n    public init: () => void;\n}\n\nexport interface AlphaMaskInstruction extends Instruction\n{\n    renderPipeId: 'alphaMask',\n    action: MaskMode,\n    mask: AlphaMask,\n    maskedContainer: Container,\n    renderMask: boolean,\n}\n\nexport interface AlphaMaskData\n{\n    filterEffect: AlphaMaskEffect,\n    maskedContainer: Container,\n    previousRenderTarget?: RenderTarget,\n    filterTexture?: Texture,\n}\n\nexport class AlphaMaskPipe implements InstructionPipe<AlphaMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'alphaMask',\n    } as const;\n\n    private _renderer: Renderer;\n    private _activeMaskStage: AlphaMaskData[] = [];\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskBegin',\n            mask,\n            canBundle: false,\n            maskedContainer\n        } as AlphaMaskInstruction);\n\n        if ((mask as AlphaMask).renderMaskToTexture)\n        {\n            const maskContainer = (mask as AlphaMask).mask;\n\n            maskContainer.includeInBuild = true;\n\n            collectAllRenderables(\n                maskContainer,\n                instructionSet,\n                renderer.renderPipes\n            );\n\n            maskContainer.includeInBuild = false;\n        }\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'pushMaskEnd',\n            mask,\n            maskedContainer,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public pop(mask: Effect, _maskedContainer: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'alphaMask',\n            action: 'popMaskEnd',\n            mask,\n            canBundle: false,\n        } as AlphaMaskInstruction);\n    }\n\n    public execute(instruction: AlphaMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderMask = instruction.mask.renderMaskToTexture;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            const filterEffect = BigPool.get(AlphaMaskEffect);\n\n            if (renderMask)\n            {\n                instruction.mask.mask.measurable = true;\n\n                const bounds = getGlobalBounds(instruction.mask.mask, true, tempBounds);\n\n                instruction.mask.mask.measurable = false;\n\n                bounds.ceil();\n\n                const colorTextureSource = renderer.renderTarget.renderTarget.colorTexture.source;\n                const filterTexture = TexturePool.getOptimalTexture(\n                    bounds.width,\n                    bounds.height,\n                    colorTextureSource._resolution,\n                    colorTextureSource.antialias\n                );\n\n                renderer.renderTarget.push(filterTexture, true);\n\n                renderer.globalUniforms.push({\n                    offset: bounds,\n                    worldColor: 0xFFFFFFFF\n                });\n\n                const sprite = filterEffect.sprite;\n\n                sprite.texture = filterTexture;\n\n                sprite.worldTransform.tx = bounds.minX;\n                sprite.worldTransform.ty = bounds.minY;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                    filterTexture,\n                });\n            }\n            else\n            {\n                filterEffect.sprite = instruction.mask.mask as Sprite;\n\n                this._activeMaskStage.push({\n                    filterEffect,\n                    maskedContainer: instruction.maskedContainer,\n                });\n            }\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            const maskData = this._activeMaskStage[this._activeMaskStage.length - 1];\n\n            if (renderMask)\n            {\n                // WebGPU blit's automatically, but WebGL does not!\n                if (renderer.type === RendererType.WEBGL)\n                {\n                    renderer.renderTarget.finishRenderPass();\n                }\n\n                renderer.renderTarget.pop();\n                renderer.globalUniforms.pop();\n            }\n\n            renderer.filter.push({\n                renderPipeId: 'filter',\n                action: 'pushFilter',\n                container: maskData.maskedContainer,\n                filterEffect: maskData.filterEffect,\n                canBundle: false,\n            });\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            renderer.filter.pop();\n\n            const maskData = this._activeMaskStage.pop();\n\n            if (renderMask)\n            {\n                TexturePool.returnTexture(maskData.filterTexture);\n            }\n\n            BigPool.return(maskData.filterEffect);\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._activeMaskStage = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../renderers/types';\nimport type { ColorMask } from './ColorMask';\n\nexport interface ColorMaskInstruction extends Instruction\n{\n    renderPipeId: 'colorMask',\n    colorMask: number,\n}\n\nexport class ColorMaskPipe implements InstructionPipe<ColorMaskInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: Renderer;\n    private _colorStack: number[] = [];\n    private _colorStackIndex = 0;\n    private _currentColor = 0;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public buildStart()\n    {\n        this._colorStack[0] = 0xF;\n        this._colorStackIndex = 1;\n        this._currentColor = 0xF;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        colorStack[this._colorStackIndex] = colorStack[this._colorStackIndex - 1] & (mask as ColorMask).mask;\n\n        const currentColor = this._colorStack[this._colorStackIndex];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n\n        this._colorStackIndex++;\n    }\n\n    public pop(_mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        const colorStack = this._colorStack;\n\n        this._colorStackIndex--;\n\n        const currentColor = colorStack[this._colorStackIndex - 1];\n\n        if (currentColor !== this._currentColor)\n        {\n            this._currentColor = currentColor;\n\n            instructionSet.add({\n                renderPipeId: 'colorMask',\n                colorMask: currentColor,\n                canBundle: false,\n            } as ColorMaskInstruction);\n        }\n    }\n\n    public execute(instruction: ColorMaskInstruction)\n    {\n        const renderer = this._renderer;\n\n        renderer.colorMask.setMask(instruction.colorMask);\n    }\n\n    public destroy()\n    {\n        this._colorStack = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { collectAllRenderables } from '../../../scene/container/utils/buildInstructions';\nimport { CLEAR } from '../../renderers/gl/const';\nimport { STENCIL_MODES } from '../../renderers/shared/state/const';\n\nimport type { Container } from '../../../scene/container/Container';\nimport type { Effect } from '../../../scene/container/Effect';\nimport type { Instruction } from '../../renderers/shared/instructions/Instruction';\nimport type { InstructionSet } from '../../renderers/shared/instructions/InstructionSet';\nimport type { InstructionPipe } from '../../renderers/shared/instructions/RenderPipe';\nimport type { Renderable } from '../../renderers/shared/Renderable';\nimport type { Renderer } from '../../renderers/types';\nimport type { StencilMask } from './StencilMask';\n\ntype MaskMode = 'pushMaskBegin' | 'pushMaskEnd' | 'popMaskBegin' | 'popMaskEnd';\n\nexport interface StencilMaskInstruction extends Instruction\n{\n    renderPipeId: 'stencilMask',\n    action: MaskMode,\n    mask: StencilMask,\n}\n\nexport class StencilMaskPipe implements InstructionPipe<StencilMaskInstruction>\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'stencilMask',\n    } as const;\n\n    private _renderer: Renderer;\n\n    // used when building and also when executing..\n    private _maskStackHash: Record<number, number> = {};\n\n    private _maskHash = new WeakMap<StencilMask, {\n        instructionsStart: number,\n        instructionsLength: number,\n    }>();\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public push(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskBegin',\n            mask,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const maskContainer = effect.mask;\n\n        maskContainer.includeInBuild = true;\n\n        if (!this._maskHash.has(effect))\n        {\n            this._maskHash.set(effect, {\n                instructionsStart: 0,\n                instructionsLength: 0,\n            });\n        }\n\n        const maskData = this._maskHash.get(effect);\n\n        maskData.instructionsStart = instructionSet.instructionSize;\n\n        collectAllRenderables(\n            maskContainer,\n            instructionSet,\n            renderer.renderPipes,\n        );\n\n        maskContainer.includeInBuild = false;\n\n        renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'pushMaskEnd',\n            mask,\n            canBundle: false,\n        } as StencilMaskInstruction);\n\n        const instructionsLength = instructionSet.instructionSize - maskData.instructionsStart - 1;\n\n        maskData.instructionsLength = instructionsLength;\n\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        this._maskStackHash[renderTargetUid] ??= 0;\n    }\n\n    public pop(mask: Effect, _container: Container, instructionSet: InstructionSet): void\n    {\n        const effect = mask as StencilMask;\n\n        const renderer = this._renderer;\n\n        // stencil is stored based on current render target..\n        renderer.renderPipes.batch.break(instructionSet);\n        renderer.renderPipes.blendMode.setBlendMode(effect.mask as Renderable, 'none', instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskBegin',\n            canBundle: false,\n        });\n\n        const maskData = this._maskHash.get(mask as StencilMask);\n\n        for (let i = 0; i < maskData.instructionsLength; i++)\n        {\n            // eslint-disable-next-line max-len\n            instructionSet.instructions[instructionSet.instructionSize++] = instructionSet.instructions[maskData.instructionsStart++];\n        }\n\n        instructionSet.add({\n            renderPipeId: 'stencilMask',\n            action: 'popMaskEnd',\n            canBundle: false,\n        });\n    }\n\n    public execute(instruction: StencilMaskInstruction)\n    {\n        const renderer = this._renderer;\n        const renderTargetUid = renderer.renderTarget.renderTarget.uid;\n\n        let maskStackIndex = this._maskStackHash[renderTargetUid] ??= 0;\n\n        if (instruction.action === 'pushMaskBegin')\n        {\n            // we create the depth and stencil buffers JIT\n            // as no point allocating the memory if we don't use it\n            renderer.renderTarget.ensureDepthStencil();\n\n            renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_ADD, maskStackIndex);\n\n            maskStackIndex++;\n\n            renderer.colorMask.setMask(0);\n        }\n        else if (instruction.action === 'pushMaskEnd')\n        {\n            renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n            renderer.colorMask.setMask(0xF);\n        }\n        else if (instruction.action === 'popMaskBegin')\n        {\n            renderer.colorMask.setMask(0);\n\n            if (maskStackIndex !== 0)\n            {\n                renderer.stencil.setStencilMode(STENCIL_MODES.RENDERING_MASK_REMOVE, maskStackIndex);\n            }\n            else\n            {\n                renderer.renderTarget.clear(null, CLEAR.STENCIL);\n                renderer.stencil.setStencilMode(STENCIL_MODES.DISABLED, maskStackIndex);\n            }\n\n            maskStackIndex--;\n        }\n        else if (instruction.action === 'popMaskEnd')\n        {\n            renderer.stencil.setStencilMode(STENCIL_MODES.MASK_ACTIVE, maskStackIndex);\n\n            renderer.colorMask.setMask(0xF);\n        }\n\n        this._maskStackHash[renderTargetUid] = maskStackIndex;\n    }\n\n    public destroy()\n    {\n        this._renderer = null;\n        this._maskStackHash = null;\n        this._maskHash = null;\n    }\n}\n","import { Color } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { ColorSource, RgbaArray } from '../../../../color/Color';\nimport type { System } from '../system/System';\n\n/**\n * Options for the background system.\n * @property {ColorSource} [backgroundColor='black']\n * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n * @property {ColorSource} [background] - Alias for backgroundColor\n * @property {number} [backgroundAlpha=1] -\n * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n * @property {boolean} [clearBeforeRender=true] - Whether to clear the canvas before new render passes.\n * @memberof rendering\n */\nexport interface BackgroundSystemOptions\n{\n    /**\n     * The background color used to clear the canvas. See {@link ColorSource} for accepted color values.\n     * @memberof rendering.SharedRendererOptions\n     * @default 'black'\n     */\n    backgroundColor: ColorSource;\n    /**\n     * Alias for backgroundColor\n     * @memberof rendering.SharedRendererOptions\n     */\n    background?: ColorSource\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @memberof rendering.SharedRendererOptions\n     * @default 1\n     */\n    backgroundAlpha: number;\n    /**\n     * Whether to clear the canvas before new render passes.\n     * @memberof rendering.SharedRendererOptions\n     * @default true\n     */\n    clearBeforeRender: boolean;\n}\n\n/**\n * The background system manages the background color and alpha of the main view.\n * @memberof rendering\n */\nexport class BackgroundSystem implements System<BackgroundSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'background',\n        priority: 0,\n    } as const;\n\n    /** default options used by the system */\n    public static defaultOptions: BackgroundSystemOptions = {\n        /**\n         * {@link WebGLOptions.backgroundAlpha}\n         * @default 1\n         */\n        backgroundAlpha: 1,\n        /**\n         * {@link WebGLOptions.backgroundColor}\n         * @default 0x000000\n         */\n        backgroundColor: 0x0,\n        /**\n         * {@link WebGLOptions.clearBeforeRender}\n         * @default true\n         */\n        clearBeforeRender: true,\n    };\n\n    /**\n     * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n     * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n     * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n     * to clear the canvas every frame. Disable this by setting this to false. For example, if\n     * your game has a canvas filling background image you often don't need this set.\n     */\n    public clearBeforeRender: boolean;\n\n    private readonly _backgroundColor: Color;\n\n    constructor()\n    {\n        this.clearBeforeRender = true;\n\n        this._backgroundColor = new Color(0x000000);\n\n        this.color = this._backgroundColor; // run bg color setter\n        this.alpha = 1;\n    }\n\n    /**\n     * initiates the background system\n     * @param options - the options for the background colors\n     */\n    public init(options: BackgroundSystemOptions): void\n    {\n        options = { ...BackgroundSystem.defaultOptions, ...options };\n\n        this.clearBeforeRender = options.clearBeforeRender;\n        this.color = options.background || options.backgroundColor || this._backgroundColor; // run bg color setter\n        this.alpha = options.backgroundAlpha;\n\n        this._backgroundColor.setAlpha(options.backgroundAlpha);\n    }\n\n    /** The background color to fill if not transparent */\n    get color(): Color\n    {\n        return this._backgroundColor;\n    }\n\n    set color(value: ColorSource)\n    {\n        this._backgroundColor.setValue(value);\n    }\n\n    /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n    get alpha(): number\n    {\n        return this._backgroundColor.alpha;\n    }\n\n    set alpha(value: number)\n    {\n        this._backgroundColor.setAlpha(value);\n    }\n\n    /** The background color as an [R, G, B, A] array. */\n    get colorRgba(): RgbaArray\n    {\n        return this._backgroundColor.toArray() as RgbaArray;\n    }\n\n    /**\n     * destroys the background system\n     * @internal\n     * @ignore\n     */\n    public destroy(): void\n    {\n        // No cleanup required\n    }\n}\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions';\nimport { FilterEffect } from '../../../../filters/FilterEffect';\nimport { warn } from '../../../../utils/logging/warn';\n\nimport type { BlendModeFilter } from '../../../../filters/blend-modes/BlendModeFilter';\nimport type { FilterInstruction } from '../../../../filters/FilterSystem';\nimport type { Renderer } from '../../types';\nimport type { Instruction } from '../instructions/Instruction';\nimport type { InstructionSet } from '../instructions/InstructionSet';\nimport type { InstructionPipe } from '../instructions/RenderPipe';\nimport type { Renderable } from '../Renderable';\nimport type { BLEND_MODES } from '../state/const';\n\ninterface AdvancedBlendInstruction extends Instruction\n{\n    renderPipeId: 'blendMode',\n    blendMode: BLEND_MODES,\n    activeBlend: Renderable[],\n}\n\n// class map\nconst BLEND_MODE_FILTERS: Partial<Record<BLEND_MODES, new () => BlendModeFilter>> = {} as const;\n\nextensions.handle(ExtensionType.BlendMode, (value) =>\n{\n    if (!value.name)\n    {\n        throw new Error('BlendMode extension must have a name property');\n    }\n    BLEND_MODE_FILTERS[value.name as BLEND_MODES] = value.ref;\n}, (value) =>\n{\n    delete BLEND_MODE_FILTERS[value.name as BLEND_MODES];\n});\n\n/**\n * This Pipe handles the blend mode switching of the renderer.\n * It will insert instructions into the {@link renderers.InstructionSet} to switch the blend mode according to the\n * blend modes of the scene graph.\n *\n * This pipe is were wwe handle Advanced blend modes. Advanced blend modes essentially wrap the renderables\n * in a filter that applies the blend mode.\n *\n * You only need to use this class if you are building your own render instruction set rather than letting PixiJS build\n * the instruction set for you by traversing the scene graph\n * @memberof rendering\n */\nexport class BlendModePipe implements InstructionPipe<AdvancedBlendInstruction>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'blendMode',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _renderableList: Renderable[];\n    private _activeBlendMode: BLEND_MODES;\n\n    private _isAdvanced = false;\n\n    private _filterHash: Partial<Record<BLEND_MODES, FilterEffect>> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * This ensures that a blendMode switch is added to the instruction set if the blend mode has changed.\n     * @param renderable - The renderable we are adding to the instruction set\n     * @param blendMode - The blend mode of the renderable\n     * @param instructionSet - The instruction set we are adding to\n     */\n    public setBlendMode(renderable: Renderable, blendMode: BLEND_MODES, instructionSet: InstructionSet)\n    {\n        if (this._activeBlendMode === blendMode)\n        {\n            if (this._isAdvanced) this._renderableList.push(renderable);\n\n            return;\n        }\n\n        this._activeBlendMode = blendMode;\n\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n\n        this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n\n        if (this._isAdvanced)\n        {\n            this._beginAdvancedBlendMode(instructionSet);\n\n            this._renderableList.push(renderable);\n        }\n    }\n\n    private _beginAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        const blendMode = this._activeBlendMode;\n\n        if (!BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS])\n        {\n            // #if _DEBUG\n            warn(`Unable to assign BlendMode: '${blendMode}'. `\n            + `You may want to include: import 'pixi.js/advanced-blend-modes'`);\n            // #endif\n\n            return;\n        }\n\n        let filterEffect = this._filterHash[blendMode];\n\n        // this does need an execute?\n        if (!filterEffect)\n        {\n            filterEffect = this._filterHash[blendMode] = new FilterEffect();\n\n            filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode as keyof typeof BLEND_MODE_FILTERS]()];\n        }\n\n        const instruction: FilterInstruction = {\n            renderPipeId: 'filter',\n            action: 'pushFilter',\n            renderables: [],\n            filterEffect,\n            canBundle: false,\n        };\n\n        this._renderableList = instruction.renderables;\n        instructionSet.add(instruction);\n    }\n\n    private _endAdvancedBlendMode(instructionSet: InstructionSet)\n    {\n        this._renderableList = null;\n        this._renderer.renderPipes.batch.break(instructionSet);\n\n        instructionSet.add({\n            renderPipeId: 'filter',\n            action: 'popFilter',\n            canBundle: false,\n        });\n    }\n\n    /**\n     * called when the instruction build process is starting this will reset internally to the default blend mode\n     * @internal\n     * @ignore\n     */\n    public buildStart()\n    {\n        this._isAdvanced = false;\n    }\n\n    /**\n     * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n     * active, we add the final render instructions added to the instruction set\n     * @param instructionSet - The instruction set we are adding to\n     * @internal\n     * @ignore\n     */\n    public buildEnd(instructionSet: InstructionSet)\n    {\n        if (this._isAdvanced)\n        {\n            this._endAdvancedBlendMode(instructionSet);\n        }\n    }\n\n    /**\n     * @internal\n     * @ignore\n     */\n    public destroy()\n    {\n        this._renderer = null;\n        this._renderableList = null;\n\n        for (const i in this._filterHash)\n        {\n            this._filterHash[i as BLEND_MODES].destroy();\n        }\n\n        this._filterHash = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Container } from '../../../../scene/container/Container';\nimport { Texture } from '../texture/Texture';\n\nimport type { ColorSource } from '../../../../color/Color';\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { GetPixelsOutput } from '../texture/GenerateCanvas';\nimport type { GenerateTextureOptions } from './GenerateTextureSystem';\n\nconst imageTypes = {\n    png: 'image/png',\n    jpg: 'image/jpeg',\n    webp: 'image/webp',\n};\n\ntype Formats = keyof typeof imageTypes;\n\n/**\n * Options for creating an image from a renderer.\n * @memberof rendering\n */\nexport interface ImageOptions\n{\n    /** The format of the image. */\n    format?: Formats;\n    /** The quality of the image. */\n    quality?: number;\n}\n\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport interface BaseExtractOptions\n{\n    /** The target to extract. */\n    target: Container | Texture;\n    /** The region of the target to extract. */\n    frame?: Rectangle;\n    /** The resolution of the extracted content. */\n    resolution?: number;\n    /** The color used to clear the extracted content. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n}\n/**\n * Options for extracting an HTMLImage from the renderer.\n * @memberof rendering\n */\nexport type ExtractImageOptions = BaseExtractOptions & ImageOptions;\n/**\n * Options for extracting and downloading content from a renderer.\n * @memberof rendering\n */\nexport type ExtractDownloadOptions = BaseExtractOptions & {\n    /** The filename to use when downloading the content. */\n    filename: string;\n};\n/**\n * Options for extracting content from a renderer.\n * @memberof rendering\n */\nexport type ExtractOptions = BaseExtractOptions | ExtractImageOptions | ExtractDownloadOptions;\n\n/**\n * This class provides renderer-specific plugins for exporting content from a renderer.\n * For instance, these plugins can be used for saving an Image, Canvas element or for exporting the raw image data (pixels).\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.extract` property.\n * @example\n * import { Application, Graphics } from 'pixi.js';\n *\n * // Create a new application (extract will be auto-added to renderer)\n * const app = new Application();\n * await app.init();\n *\n * // Draw a red circle\n * const graphics = new Graphics()\n *     .circle(0, 0, 50);\n *     .fill(0xFF0000)\n *\n * // Render the graphics as an HTMLImageElement\n * const image = await app.renderer.extract.image(graphics);\n * document.body.appendChild(image);\n * @memberof rendering\n */\nexport class ExtractSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'extract',\n    } as const;\n\n    /** Default options for creating an image. */\n    public static defaultImageOptions: ImageOptions = {\n        /** The format of the image. */\n        format: 'png' as Formats,\n        /** The quality of the image. */\n        quality: 1,\n    };\n\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    private _normalizeOptions<T extends ExtractOptions>(\n        options: ExtractImageOptions | Container | Texture,\n        defaults: Partial<T> = {},\n    ): T\n    {\n        if (options instanceof Container || options instanceof Texture)\n        {\n            return {\n                target: options,\n                ...defaults\n            } as T;\n        }\n\n        return {\n            ...defaults,\n            ...options,\n        } as T;\n    }\n\n    /**\n     * Will return a HTML Image of the target\n     * @param options - The options for creating the image, or the target to extract\n     * @returns - HTML Image of the target\n     */\n    public async image(options: ExtractImageOptions | Container | Texture): Promise<HTMLImageElement>\n    {\n        const image = new Image();\n\n        image.src = await this.base64(options);\n\n        return image;\n    }\n\n    /**\n     * Will return a base64 encoded string of this target. It works by calling\n     * `Extract.canvas` and then running toDataURL on that.\n     * @param options - The options for creating the image, or the target to extract\n     */\n    public async base64(options: ExtractImageOptions | Container | Texture): Promise<string>\n    {\n        options = this._normalizeOptions<ExtractImageOptions>(\n            options,\n            ExtractSystem.defaultImageOptions\n        );\n\n        const { format, quality } = options;\n\n        const canvas = this.canvas(options);\n\n        if (canvas.toBlob !== undefined)\n        {\n            return new Promise<string>((resolve, reject) =>\n            {\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                canvas.toBlob!((blob) =>\n                {\n                    if (!blob)\n                    {\n                        reject(new Error('ICanvas.toBlob failed!'));\n\n                        return;\n                    }\n\n                    const reader = new FileReader();\n\n                    reader.onload = () => resolve(reader.result as string);\n                    reader.onerror = reject;\n                    reader.readAsDataURL(blob);\n                }, imageTypes[format], quality);\n            });\n        }\n        if (canvas.toDataURL !== undefined)\n        {\n            return canvas.toDataURL(imageTypes[format], quality);\n        }\n        if (canvas.convertToBlob !== undefined)\n        {\n            const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n\n            return new Promise<string>((resolve, reject) =>\n            {\n                const reader = new FileReader();\n\n                reader.onload = () => resolve(reader.result as string);\n                reader.onerror = reject;\n                reader.readAsDataURL(blob);\n            });\n        }\n\n        throw new Error('Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, '\n            + 'or ICanvas.convertToBlob to be implemented');\n    }\n\n    /**\n     * Creates a Canvas element, renders this target to it and then returns it.\n     * @param options - The options for creating the canvas, or the target to extract\n     * @returns - A Canvas element with the texture rendered on.\n     */\n    public canvas(options: ExtractOptions | Container | Texture): ICanvas\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n\n        if (target instanceof Texture)\n        {\n            return renderer.texture.generateCanvas(target);\n        }\n\n        const texture = renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const canvas = renderer.texture.generateCanvas(texture);\n\n        texture.destroy();\n\n        return canvas;\n    }\n\n    /**\n     * Will return a one-dimensional array containing the pixel data of the entire texture in RGBA\n     * order, with integer values between 0 and 255 (included).\n     * @param options - The options for extracting the image, or the target to extract\n     * @returns - One-dimensional array containing the pixel data of the entire texture\n     */\n    public pixels(options: ExtractOptions | Container | Texture): GetPixelsOutput\n    {\n        options = this._normalizeOptions(options);\n\n        const target = options.target;\n\n        const renderer = this._renderer;\n        const texture = target instanceof Texture\n            ? target\n            : renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n\n        const pixelInfo = renderer.texture.getPixels(texture);\n\n        if (target instanceof Container)\n        {\n            // destroy generated texture\n            texture.destroy();\n        }\n\n        return pixelInfo;\n    }\n\n    /**\n     * Will return a texture of the target\n     * @param options - The options for creating the texture, or the target to extract\n     * @returns - A texture of the target\n     */\n    public texture(options: ExtractOptions | Container | Texture): Texture\n    {\n        options = this._normalizeOptions(options);\n\n        if (options.target instanceof Texture) return options.target;\n\n        return this._renderer.textureGenerator.generateTexture(options as GenerateTextureOptions);\n    }\n\n    /**\n     * Will extract a HTMLImage of the target and download it\n     * @param options - The options for downloading and extracting the image, or the target to extract\n     */\n    public download(options: ExtractDownloadOptions | Container | Texture)\n    {\n        options = this._normalizeOptions<ExtractDownloadOptions>(options);\n\n        const canvas = this.canvas(options);\n\n        const link = document.createElement('a');\n\n        link.download = options.filename ?? 'image.png';\n        link.href = canvas.toDataURL('image/png');\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n    }\n\n    /**\n     * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n     * @param options - The options for logging the image, or the target to log\n     */\n    public log(options: (ExtractOptions & {width?: number}) | Container | Texture)\n    {\n        const width = options.width ?? 200;\n\n        options = this._normalizeOptions(options);\n\n        const canvas = this.canvas(options);\n\n        const base64 = canvas.toDataURL();\n\n        // eslint-disable-next-line no-console\n        console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n\n        const style = [\n            'font-size: 1px;',\n            `padding: ${width}px ${300}px;`,\n            `background: url(${base64}) no-repeat;`,\n            'background-size: contain;',\n        ].join(' ');\n\n        // eslint-disable-next-line no-console\n        console.log('%c ', style);\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n","import { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\n/**\n * A render texture, extends `Texture`.\n * @see {@link rendering.Texture}\n * @memberof rendering\n */\nexport class RenderTexture extends Texture\n{\n    public static create(options: TextureSourceOptions): Texture\n    {\n        return new Texture({\n            source: new TextureSource(options)\n        });\n    }\n\n    /**\n     * Resizes the render texture.\n     * @param width - The new width of the render texture.\n     * @param height - The new height of the render texture.\n     * @param resolution - The new resolution of the render texture.\n     * @returns This texture.\n     */\n    public resize(width: number, height: number, resolution?: number): this\n    {\n        this.source.resize(width, height, resolution);\n\n        return this;\n    }\n}\n","import { Color, type ColorSource } from '../../../../color/Color';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds';\nimport { Container } from '../../../../scene/container/Container';\nimport { RenderTexture } from '../texture/RenderTexture';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\nimport type { TextureSourceOptions } from '../texture/sources/TextureSource';\nimport type { Texture } from '../texture/Texture';\n\nexport type GenerateTextureSourceOptions = Omit<TextureSourceOptions, 'resource' | 'width' | 'height' | 'resolution'>;\n\n/**\n * Options for generating a texture from a container.\n * @memberof rendering\n */\nexport type GenerateTextureOptions =\n{\n    /** The container to generate the texture from */\n    target: Container;\n    /**\n     * The region of the container, that shall be rendered,\n     * if no region is specified, defaults to the local bounds of the container.\n     */\n    frame?: Rectangle;\n    /** The resolution of the texture being generated. */\n    resolution?: number;\n    /** The color used to clear the texture. */\n    clearColor?: ColorSource;\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    antialias?: boolean;\n    /** The options passed to the texture source. */\n    textureSourceOptions?: GenerateTextureSourceOptions,\n};\n\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor: ColorSource = [0, 0, 0, 0];\n\n/**\n * System that manages the generation of textures from the renderer\n *\n *\n * Do not instantiate these plugins directly. It is available from the `renderer.textureGenerator` property.\n * @memberof rendering\n */\nexport class GenerateTextureSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGenerator',\n    } as const;\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * A Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your container is complicated and needs to be reused multiple times.\n     * @param {GenerateTextureOptions | Container} options - Generate texture options.\n     * @param {Container} [options.container] - If not given, the renderer's resolution is used.\n     * @param {Rectangle} options.region - The region of the container, that shall be rendered,\n     * @param {number} [options.resolution] - The resolution of the texture being generated.\n     *        if no region is specified, defaults to the local bounds of the container.\n     * @param {GenerateTextureSourceOptions} [options.textureSourceOptions] - Texture options for GPU.\n     * @returns a shiny new texture of the container passed in\n     */\n    public generateTexture(options: GenerateTextureOptions | Container): Texture\n    {\n        if (options instanceof Container)\n        {\n            options = {\n                target: options,\n                frame: undefined,\n                textureSourceOptions: {},\n                resolution: undefined,\n            };\n        }\n\n        const resolution = options.resolution || this._renderer.resolution;\n        const antialias = options.antialias || this._renderer.view.antialias;\n\n        const container = options.target;\n\n        let clearColor = options.clearColor;\n\n        if (clearColor)\n        {\n            const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n\n            clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n        }\n        else\n        {\n            clearColor = noColor;\n        }\n\n        const region = options.frame?.copyTo(tempRect)\n            || getLocalBounds(container, tempBounds).rectangle;\n\n        region.width = Math.max(region.width, 1 / resolution) | 0;\n        region.height = Math.max(region.height, 1 / resolution) | 0;\n\n        const target = RenderTexture.create({\n            ...options.textureSourceOptions,\n            width: region.width,\n            height: region.height,\n            resolution,\n            antialias,\n        });\n\n        const transform = Matrix.shared.translate(-region.x, -region.y);\n\n        this._renderer.render({\n            container,\n            transform,\n            target,\n            clearColor,\n        });\n\n        target.source.updateMipmaps();\n\n        return target;\n    }\n\n    public destroy(): void\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { Matrix } from '../../../../maths/matrix/Matrix';\nimport { Point } from '../../../../maths/point/Point';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform';\nimport { BindGroup } from '../../gpu/shader/BindGroup';\nimport { type Renderer, RendererType } from '../../types';\nimport { UniformGroup } from '../shader/UniformGroup';\n\nimport type { PointData } from '../../../../maths/point/PointData';\nimport type { GlRenderTargetSystem } from '../../gl/renderTarget/GlRenderTargetSystem';\nimport type { GpuRenderTargetSystem } from '../../gpu/renderTarget/GpuRenderTargetSystem';\nimport type { WebGPURenderer } from '../../gpu/WebGPURenderer';\nimport type { UboSystem } from '../shader/UboSystem';\nimport type { System } from '../system/System';\n\nexport type GlobalUniformGroup = UniformGroup<{\n    uProjectionMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldTransformMatrix: { value: Matrix; type: 'mat3x3<f32>' }\n    uWorldColorAlpha: { value: Float32Array; type: 'vec4<f32>' }\n    uResolution: { value: number[]; type: 'vec2<f32>' }\n}>;\n\nexport interface GlobalUniformOptions\n{\n    size?: number[],\n    projectionMatrix?: Matrix,\n    worldTransformMatrix?: Matrix\n    worldColor?: number\n    offset?: PointData\n}\n\nexport interface GlobalUniformData\n{\n    projectionMatrix: Matrix\n    worldTransformMatrix: Matrix\n    worldColor: number\n    resolution: number[]\n    offset: PointData\n    bindGroup: BindGroup\n}\n\nexport interface GlobalUniformRenderer\n{\n    renderTarget: GlRenderTargetSystem | GpuRenderTargetSystem\n    renderPipes: Renderer['renderPipes'];\n    ubo: UboSystem;\n    type: RendererType;\n}\n\n/**\n * System plugin to the renderer to manage global uniforms for the renderer.\n * @memberof rendering\n */\nexport class GlobalUniformSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'globalUniforms',\n    } as const;\n\n    private readonly _renderer: GlobalUniformRenderer;\n\n    private _stackIndex = 0;\n    private _globalUniformDataStack: GlobalUniformData[] = [];\n\n    private readonly _uniformsPool: GlobalUniformGroup[] = [];\n    private readonly _activeUniforms: GlobalUniformGroup[] = [];\n\n    private readonly _bindGroupPool: BindGroup[] = [];\n    private readonly _activeBindGroups: BindGroup[] = [];\n\n    private _currentGlobalUniformData: GlobalUniformData;\n\n    constructor(renderer: GlobalUniformRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public reset()\n    {\n        this._stackIndex = 0;\n\n        for (let i = 0; i < this._activeUniforms.length; i++)\n        {\n            this._uniformsPool.push(this._activeUniforms[i]);\n        }\n\n        for (let i = 0; i < this._activeBindGroups.length; i++)\n        {\n            this._bindGroupPool.push(this._activeBindGroups[i]);\n        }\n\n        this._activeUniforms.length = 0;\n        this._activeBindGroups.length = 0;\n    }\n\n    public start(options: GlobalUniformOptions): void\n    {\n        this.reset();\n\n        this.push(options);\n    }\n\n    public bind({\n        size,\n        projectionMatrix,\n        worldTransformMatrix,\n        worldColor,\n        offset,\n    }: GlobalUniformOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.renderTarget;\n\n        const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n            projectionData: renderTarget,\n            worldTransformMatrix: new Matrix(),\n            worldColor: 0xFFFFFFFF,\n            offset: new Point(),\n        };\n\n        const globalUniformData: GlobalUniformData = {\n            projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n            resolution: size || renderTarget.size,\n            worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n            worldColor: worldColor || currentGlobalUniformData.worldColor,\n            offset: offset || currentGlobalUniformData.offset,\n            bindGroup: null,\n        };\n\n        const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n\n        this._activeUniforms.push(uniformGroup);\n\n        const uniforms = uniformGroup.uniforms;\n\n        uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n\n        uniforms.uResolution = globalUniformData.resolution;\n\n        uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n\n        uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n        uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n\n        color32BitToUniform(\n            globalUniformData.worldColor,\n            uniforms.uWorldColorAlpha,\n            0\n        );\n\n        uniformGroup.update();\n\n        let bindGroup: BindGroup;\n\n        if ((this._renderer as WebGPURenderer).renderPipes.uniformBatch)\n        {\n            bindGroup = (this._renderer as WebGPURenderer).renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n        }\n        else\n        {\n            bindGroup = this._bindGroupPool.pop() || new BindGroup();\n            this._activeBindGroups.push(bindGroup);\n            bindGroup.setResource(uniformGroup, 0);\n        }\n\n        globalUniformData.bindGroup = bindGroup;\n\n        this._currentGlobalUniformData = globalUniformData;\n    }\n\n    public push(options: GlobalUniformOptions)\n    {\n        this.bind(options);\n\n        this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n    }\n\n    public pop()\n    {\n        this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n\n        // for webGL we need to update the uniform group here\n        // as we are not using bind groups\n        if (this._renderer.type === RendererType.WEBGL)\n        {\n            (this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup).update();\n        }\n    }\n\n    get bindGroup(): BindGroup\n    {\n        return this._currentGlobalUniformData.bindGroup;\n    }\n\n    get uniformGroup()\n    {\n        return this._currentGlobalUniformData.bindGroup.resources[0] as UniformGroup;\n    }\n\n    private _createUniforms(): GlobalUniformGroup\n    {\n        const globalUniforms = new UniformGroup({\n            uProjectionMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uWorldTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n            uWorldColorAlpha: { value: new Float32Array(4), type: 'vec4<f32>' },\n            uResolution: { value: [0, 0], type: 'vec2<f32>' },\n        }, {\n            isStatic: true,\n        });\n\n        return globalUniforms;\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { DOMAdapter } from '../environment/adapter';\n\nlet saidHello = false;\n\nexport const VERSION = '$_VERSION';\n\n/**\n * Prints out the version and renderer information for this running instance of PixiJS.\n * @param type - The name of the renderer this instance is using.\n * @returns {void}\n */\nexport function sayHello(type: string): void\n{\n    if (saidHello)\n    {\n        return;\n    }\n\n    if (DOMAdapter.get().getNavigator().userAgent.toLowerCase().indexOf('chrome') > -1)\n    {\n        const args = [\n            `%c  %c  %c  %c  %c PixiJS %c v${VERSION} (${type}) http://www.pixijs.com/\\n\\n`,\n            'background: #E72264; padding:5px 0;',\n            'background: #6CA2EA; padding:5px 0;',\n            'background: #B5D33D; padding:5px 0;',\n            'background: #FED23F; padding:5px 0;',\n            'color: #FFFFFF; background: #E72264; padding:5px 0;',\n            'color: #E72264; background: #FFFFFF; padding:5px 0;',\n        ];\n\n        globalThis.console.log(...args);\n    }\n    else if (globalThis.console)\n    {\n        globalThis.console.log(`PixiJS ${VERSION} - ${type} - http://www.pixijs.com/`);\n    }\n\n    saidHello = true;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { sayHello } from '../../../../utils/sayHello';\nimport { type Renderer, RendererType } from '../../types';\n\nimport type { WebGLRenderer } from '../../gl/WebGLRenderer';\nimport type { System } from '../system/System';\n\n/**\n * Options for the startup system.\n * @property {boolean} [hello=false] - Whether to log the version and type information of renderer to console.\n * @memberof rendering\n */\nexport interface HelloSystemOptions\n{\n    /**\n     * Whether to log the version and type information of renderer to console.\n     * @memberof rendering.SharedRendererOptions\n     * @default false\n     */\n    hello: boolean;\n}\n\n/**\n * A simple system responsible for initiating the renderer.\n * @memberof rendering\n */\nexport class HelloSystem implements System<HelloSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'hello',\n        priority: -2,\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: HelloSystemOptions = {\n        /** {@link WebGLOptions.hello} */\n        hello: false,\n    };\n\n    private readonly _renderer: Renderer;\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * It all starts here! This initiates every system, passing in the options for any system by name.\n     * @param options - the config for the renderer and all its systems\n     */\n    public init(options: HelloSystemOptions): void\n    {\n        if (options.hello)\n        {\n            let name = this._renderer.name;\n\n            if (this._renderer.type === RendererType.WEBGL)\n            {\n                name += ` ${(this._renderer as WebGLRenderer).context.webGLVersion}`;\n            }\n\n            sayHello(name);\n        }\n    }\n}\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions';\n\nimport type { Renderer } from '../../types';\nimport type { System } from '../system/System';\n\n/**\n * Options for the {@link TextureGCSystem}.\n * @memberof rendering\n * @property {boolean} [textureGCActive=true] - If set to true, this will enable the garbage collector on the GPU.\n * @property {number} [textureGCAMaxIdle=60 * 60] -\n * The maximum idle frames before a texture is destroyed by garbage collection.\n * @property {number} [textureGCCheckCountMax=600] - Frames between two garbage collections.\n */\nexport interface TextureGCSystemOptions\n{\n    /**\n     * If set to true, this will enable the garbage collector on the GPU.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCActive: boolean;\n    /**\n     * The maximum idle frames before a texture is destroyed by garbage collection.\n     * @default 60 * 60\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCAMaxIdle: number;\n    /**\n     * Frames between two garbage collections.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    textureGCCheckCountMax: number;\n}\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n * @memberof rendering\n */\nexport class TextureGCSystem implements System<TextureGCSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n        ],\n        name: 'textureGC',\n    } as const;\n\n    /** default options for the TextureGCSystem */\n    public static defaultOptions: TextureGCSystemOptions = {\n        /**\n         * If set to true, this will enable the garbage collector on the GPU.\n         * @default true\n         */\n        textureGCActive: true,\n        /**\n         * The maximum idle frames before a texture is destroyed by garbage collection.\n         * @default 60 * 60\n         */\n        textureGCAMaxIdle: 60 * 60,\n        /**\n         * Frames between two garbage collections.\n         * @default 600\n         */\n        textureGCCheckCountMax: 600,\n    };\n\n    /**\n     * Frame count since started.\n     * @readonly\n     */\n    public count: number;\n\n    /**\n     * Frame count since last garbage collection.\n     * @readonly\n     */\n    public checkCount: number;\n\n    /**\n     * Maximum idle frames before a texture is destroyed by garbage collection.\n     * @see TextureGCSystem.defaultMaxIdle\n     */\n    public maxIdle: number;\n\n    /**\n     * Frames between two garbage collections.\n     * @see TextureGCSystem.defaultCheckCountMax\n     */\n    public checkCountMax: number;\n\n    /**\n     * Current garbage collection mode.\n     * @see TextureGCSystem.defaultMode\n     */\n    public active: boolean;\n    private _renderer: Renderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n\n        this.count = 0;\n        this.checkCount = 0;\n    }\n\n    public init(options: TextureGCSystemOptions): void\n    {\n        options = { ...TextureGCSystem.defaultOptions, ...options };\n\n        this.checkCountMax = options.textureGCCheckCountMax;\n        this.maxIdle = options.textureGCAMaxIdle;\n        this.active = options.textureGCActive;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    protected postrender(): void\n    {\n        if (!this._renderer.renderingToScreen)\n        {\n            return;\n        }\n\n        this.count++;\n\n        if (!this.active) return;\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used.\n     * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n     */\n    public run(): void\n    {\n        const managedTextures = this._renderer.texture.managedTextures;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // Only supports non generated textures at the moment!\n            if (\n                texture.autoGarbageCollect\n                && texture.resource\n                && texture._touched > -1\n                && this.count - texture._touched > this.maxIdle\n            )\n            {\n                texture._touched = -1;\n                texture.unload();\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null as any as Renderer;\n    }\n}\n\nextensions.add(TextureGCSystem);\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation';\nimport { RenderTarget } from '../renderTarget/RenderTarget';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { TypeOrBool } from '../../../../scene/container/destroyTypes';\nimport type { System } from '../system/System';\nimport type { CanvasSource, CanvasSourceOptions } from '../texture/sources/CanvasSource';\nimport type { Texture } from '../texture/Texture';\n\n/**\n * Options passed to the ViewSystem\n * @memberof rendering\n * @property {number} [width=800] - The width of the screen.\n * @property {number} [height=600] - The height of the screen.\n * @property {ICanvas} [canvas] - The canvas to use as a view, optional.\n * @property {boolean} [autoDensity=false] - Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n * @property {number} [resolution] - The resolution / device pixel ratio of the renderer.\n * @property {boolean} [antialias=false] - Whether to enable anti-aliasing. This may affect performance.\n * @property {boolean} [depth] -\n * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n * @property {boolean} [multiView] - TODO: multiView\n * @property {number} [backgroundAlpha] - The alpha of the background.\n */\nexport interface ViewSystemOptions\n{\n    /**\n     * The width of the screen.\n     * @default 800\n     * @memberof rendering.SharedRendererOptions\n     */\n    width?: number;\n    /**\n     * The height of the screen.\n     * @default 600\n     * @memberof rendering.SharedRendererOptions\n     */\n    height?: number;\n    /**\n     * The canvas to use as a view, optional.\n     * @memberof rendering.SharedRendererOptions\n     */\n    canvas?: ICanvas;\n    /** @deprecated */\n    view?: ICanvas;\n    /**\n     * Resizes renderer view in CSS pixels to allow for resolutions other than 1.\n     * @memberof rendering.SharedRendererOptions\n     */\n    autoDensity?: boolean;\n    /**\n     * The resolution / device pixel ratio of the renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    resolution?: number;\n    /**\n     * Whether to enable anti-aliasing. This may affect performance.\n     * @memberof rendering.SharedRendererOptions\n     */\n    antialias?: boolean;\n    /**\n     * Whether to ensure the main view has can make use of the depth buffer. Always true for WebGL renderer.\n     * @memberof rendering.SharedRendererOptions\n     */\n    depth?: boolean;\n    /**\n     * TODO: multiView\n     * @memberof rendering.SharedRendererOptions\n     */\n    multiView?: boolean;\n\n    /**\n     * Transparency of the background color, value from `0` (fully transparent) to `1` (fully opaque).\n     * @default 1\n     */\n    backgroundAlpha?: number;\n}\n\nexport interface ViewSystemDestroyOptions\n{\n    /** Whether to remove the view element from the DOM. Defaults to `false`. */\n    removeView?: boolean;\n}\n\n/**\n * The view system manages the main canvas that is attached to the DOM.\n * This main role is to deal with how the holding the view reference and dealing with how it is resized.\n * @memberof rendering\n */\nexport class ViewSystem implements System<ViewSystemOptions, TypeOrBool<ViewSystemDestroyOptions>>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n            ExtensionType.WebGPUSystem,\n            ExtensionType.CanvasSystem,\n        ],\n        name: 'view',\n        priority: 0,\n    } as const;\n\n    /** The default options for the view system. */\n    public static defaultOptions: ViewSystemOptions = {\n        /**\n         * {@link WebGLOptions.width}\n         * @default 800\n         */\n        width: 800,\n        /**\n         * {@link WebGLOptions.height}\n         * @default 600\n         */\n        height: 600,\n        /**\n         * {@link WebGLOptions.autoDensity}\n         * @default false\n         */\n        autoDensity: false,\n        /**\n         * {@link WebGLOptions.antialias}\n         * @default false\n         */\n        antialias: false,\n    };\n\n    public multiView: boolean;\n\n    /** The canvas element that everything is drawn to. */\n    public canvas!: ICanvas;\n\n    /** The texture that is used to draw the canvas to the screen. */\n    public texture: Texture;\n\n    /**\n     * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n     * @member {boolean}\n     */\n    public autoDensity: boolean;\n\n    /** Whether to enable anti-aliasing. This may affect performance. */\n    public antialias: boolean;\n\n    /**\n     * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n     *\n     * Its safe to use as filterArea or hitArea for the whole stage.\n     */\n    public screen: Rectangle;\n    /** The render target that the view is drawn to. */\n    public renderTarget: RenderTarget;\n\n    /** The resolution / device pixel ratio of the renderer. */\n    get resolution(): number\n    {\n        return this.texture.source._resolution;\n    }\n\n    set resolution(value: number)\n    {\n        this.texture.source.resize(\n            this.texture.source.width,\n            this.texture.source.height,\n            value\n        );\n    }\n\n    /**\n     * initiates the view system\n     * @param options - the options for the view\n     */\n    public init(options: ViewSystemOptions): void\n    {\n        options = {\n            ...ViewSystem.defaultOptions,\n            ...options,\n        };\n\n        if (options.view)\n        {\n            // #if _DEBUG\n            deprecation(v8_0_0, 'ViewSystem.view has been renamed to ViewSystem.canvas');\n            // #endif\n\n            options.canvas = options.view;\n        }\n\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n        this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n        this.antialias = !!options.antialias;\n        this.texture = getCanvasTexture(this.canvas, options as CanvasSourceOptions);\n        this.renderTarget = new RenderTarget({\n            colorTextures: [this.texture],\n            depth: !!options.depth,\n            isRoot: true,\n        });\n\n        (this.texture.source as CanvasSource).transparent = options.backgroundAlpha < 1;\n        this.multiView = !!options.multiView;\n\n        if (this.autoDensity)\n        {\n            this.canvas.style.width = `${this.texture.width}px`;\n            this.canvas.style.height = `${this.texture.height}px`;\n        }\n\n        this.resolution = options.resolution;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified dimensions.\n     * @param desiredScreenWidth - The new width of the screen.\n     * @param desiredScreenHeight - The new height of the screen.\n     * @param resolution\n     */\n    public resize(desiredScreenWidth: number, desiredScreenHeight: number, resolution: number): void\n    {\n        this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n\n        this.screen.width = this.texture.frame.width;\n        this.screen.height = this.texture.frame.height;\n\n        if (this.autoDensity)\n        {\n            this.canvas.style.width = `${desiredScreenWidth}px`;\n            this.canvas.style.height = `${desiredScreenHeight}px`;\n        }\n    }\n\n    /**\n     * Destroys this System and optionally removes the canvas from the dom.\n     * @param {options | false} options - The options for destroying the view, or \"false\".\n     * @param options.removeView - Whether to remove the view element from the DOM. Defaults to `false`.\n     */\n    public destroy(options: TypeOrBool<ViewSystemDestroyOptions> = false): void\n    {\n        const removeView = typeof options === 'boolean' ? options : !!options?.removeView;\n\n        if (removeView && this.canvas.parentNode)\n        {\n            this.canvas.parentNode.removeChild(this.canvas);\n        }\n\n        // note: don't nullify the element\n        //       other systems may need to unbind from it during the destroy iteration (eg. GLContextSystem)\n    }\n}\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe';\nimport { BackgroundSystem } from '../background/BackgroundSystem';\nimport { BlendModePipe } from '../blendModes/BlendModePipe';\nimport { ExtractSystem } from '../extract/ExtractSystem';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem';\nimport { HelloSystem } from '../startup/HelloSystem';\nimport { TextureGCSystem } from '../texture/TextureGCSystem';\nimport { ViewSystem } from '../view/ViewSystem';\n\nimport type { ExtractRendererOptions } from './utils/typeUtils';\n\nexport const SharedSystems = [\n    BackgroundSystem,\n    GlobalUniformSystem,\n    HelloSystem,\n    ViewSystem,\n    RenderGroupSystem,\n    TextureGCSystem,\n    GenerateTextureSystem,\n    ExtractSystem,\n    RendererInitHook\n];\n\nexport const SharedRenderPipes = [\n    BlendModePipe,\n    BatcherPipe,\n    SpritePipe,\n    RenderGroupPipe,\n    AlphaMaskPipe,\n    StencilMaskPipe,\n    ColorMaskPipe,\n    CustomRenderPipe\n];\n\n/**\n * Options for the shared systems of a renderer.\n * @memberof rendering\n */\nexport interface SharedRendererOptions extends ExtractRendererOptions<typeof SharedSystems>, PixiMixins.RendererOptions\n{\n    /**\n     * Whether to stop PixiJS from dynamically importing default extensions for the renderer.\n     * It is false by default, and means PixiJS will load all the default extensions, based\n     * on the environment e.g browser/webworker.\n     * If you set this to true, then you will need to manually import the systems and extensions you need.\n     *\n     * e.g.\n     * ```js\n     * import 'accessibility';\n     * import 'app';\n     * import 'events';\n     * import 'spritesheet';\n     * import 'graphics';\n     * import 'mesh';\n     * import 'text';\n     * import 'text-bitmap';\n     * import 'text-html';\n     * import { autoDetectRenderer } from 'pixi.js';\n     *\n     * const renderer = await autoDetectRenderer({\n     *   width: 800,\n     *   height: 600,\n     *   skipExtensionImports: true,\n     * });\n     * ```\n     * @default false\n     */\n    skipExtensionImports?: boolean;\n    /**\n     * @default true\n     * @deprecated since 8.1.6\n     * @see `skipExtensionImports`\n     */\n    manageImports?: boolean;\n}\n","/* eslint-disable quote-props */\nimport { uniformParsers } from './uniformParsers';\n\nimport type { UboElement, UNIFORM_TYPES_SINGLE, UniformsSyncCallback } from '../types';\n\nexport function createUboSyncFunction(\n    uboElements: UboElement[],\n    parserCode: 'uboWgsl' | 'uboStd40',\n    arrayGenerationFunction: (uboElement: UboElement, offsetToAdd: number) => string,\n    singleSettersMap: Record<UNIFORM_TYPES_SINGLE, string>,\n): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n\n    let prev = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        const name = uboElement.data.name;\n\n        let parsed = false;\n        let offset = 0;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const uniformParser = uniformParsers[j];\n\n            if (uniformParser.test(uboElement.data))\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(\n                    `name = \"${name}\";`,\n                    `offset += ${offset - prev};`,\n                    uniformParsers[j][parserCode] || uniformParsers[j].ubo);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            if (uboElement.data.size > 1)\n            {\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n            }\n            else\n            {\n                const template = singleSettersMap[uboElement.data.type as UNIFORM_TYPES_SINGLE];\n\n                offset = uboElement.offset / 4;\n\n                funcFragments.push(/* wgsl */`\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `);\n            }\n        }\n\n        prev = offset;\n    }\n\n    const fragmentSrc = funcFragments.join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function(\n        'uv',\n        'data',\n        'offset',\n        fragmentSrc,\n    ) as UniformsSyncCallback;\n}\n","/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n// Parsers, each one of these will take a look at the type of shader property and uniform.\n// if they pass the test function then the code function is called that returns a the shader upload code for that uniform.\n// Shader upload code is automagically generated with these parsers.\n// If no parser is valid then the default upload functions are used.\n// exposing Parsers means that custom upload logic can be added to pixi's shaders.\n// A good example would be a pixi rectangle can be directly set on a uniform.\n// If the shader sees it it knows how to upload the rectangle structure as a vec4\n// format is as follows:\n//\n// {\n//     test: (data, uniform) => {} <--- test is this code should be used for this uniform\n//     code: (name, uniform) => {} <--- returns the string of the piece of code that uploads the uniform\n//     codeUbo: (name, uniform) => {} <--- returns the string of the piece of code that uploads the\n//                                         uniform to a uniform buffer\n// }\n// import { Texture } from '../../texture/Texture';\n\nimport type { Color } from '../../../../../color/Color';\nimport type { Matrix } from '../../../../../maths/matrix/Matrix';\nimport type { PointLike } from '../../../../../maths/point/PointLike';\nimport type { Rectangle } from '../../../../../maths/shapes/Rectangle';\nimport type { UNIFORM_TYPES, UniformData } from '../types';\n\nexport interface UniformParserDefinition\n{\n    type: UNIFORM_TYPES;\n    test(data: UniformData): boolean;\n    ubo?: string;\n    uboWgsl?: string;\n    uboStd40?: string;\n    uniform?: string;\n}\n\nexport const uniformParsers: UniformParserDefinition[] = [\n    // uploading pixi matrix object to mat3\n    {\n        type: 'mat3x3<f32>',\n        test: (data: UniformData): boolean =>\n        {\n            const value = data.value as Matrix;\n\n            return value.a !== undefined;\n        },\n        ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n        uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n    },\n    // uploading a pixi rectangle as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Rectangle).width !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n    },\n    // uploading a pixi point as a vec2\n    {\n        type: 'vec2<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec2<f32>' && data.size === 1 && (data.value as PointLike).x !== undefined,\n        ubo:  `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n    },\n    // uploading a pixi color as a vec4\n    {\n        type: 'vec4<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec4<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n    },\n    // uploading a pixi color as a vec3\n    {\n        type: 'vec3<f32>',\n        test: (data: UniformData): boolean =>\n            data.type === 'vec3<f32>' && data.size === 1 && (data.value as Color).red !== undefined,\n        ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n        uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n    },\n];\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported';\nimport { Buffer } from '../buffer/Buffer';\nimport { BufferUsage } from '../buffer/const';\n\nimport type { System } from '../system/System';\nimport type { UboElement, UboLayout, UniformData, UniformsSyncCallback } from './types';\nimport type { UniformGroup } from './UniformGroup';\n\nexport interface UboAdaptor\n{\n    createUboElements: (uniformData: UniformData[]) => UboLayout;\n    generateUboSync: (uboElements: UboElement[]) => UniformsSyncCallback;\n}\n\n/**\n * System plugin to the renderer to manage uniform buffers.\n * @memberof rendering\n */\nexport class UboSystem implements System\n{\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    private _syncFunctionHash: Record<string, {\n        layout: UboLayout,\n        syncFunction: (uniforms: Record<string, any>, data: Float32Array, offset: number) => void\n    }> = Object.create(null);\n\n    private readonly _adaptor: UboAdaptor;\n\n    constructor(adaptor: UboAdaptor)\n    {\n        this._adaptor = adaptor;\n\n        // Validation check that this environment support `new Function`\n        this._systemCheck();\n    }\n\n    /**\n     * Overridable function by `pixi.js/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     * @private\n     */\n    private _systemCheck(): void\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                 + 'please use pixi.js/unsafe-eval module to enable support.');\n        }\n    }\n\n    public ensureUniformGroup(uniformGroup: UniformGroup): void\n    {\n        const uniformData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n    }\n\n    public getUniformGroupData(uniformGroup: UniformGroup)\n    {\n        return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n    }\n\n    private _initUniformGroup(uniformGroup: UniformGroup)\n    {\n        const uniformGroupSignature = uniformGroup._signature;\n\n        let uniformData = this._syncFunctionHash[uniformGroupSignature];\n\n        if (!uniformData)\n        {\n            const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n\n            const layout = this._adaptor.createUboElements(elements);\n\n            const syncFunction = this._generateUboSync(layout.uboElements);\n\n            uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n                layout,\n                syncFunction\n            };\n        }\n\n        return this._syncFunctionHash[uniformGroupSignature];\n    }\n\n    private _generateUboSync(\n        uboElements: UboElement[],\n    ): UniformsSyncCallback\n    {\n        return this._adaptor.generateUboSync(uboElements);\n    }\n\n    public syncUniformGroup(uniformGroup: UniformGroup, data?: Float32Array, offset?: number): boolean\n    {\n        const uniformGroupData = this.getUniformGroupData(uniformGroup);\n\n        uniformGroup.buffer ||= new Buffer({\n            data: new Float32Array(uniformGroupData.layout.size / 4),\n            usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST,\n        });\n\n        data ||= (uniformGroup.buffer.data as Float32Array);\n        offset ||= 0;\n\n        uniformGroupData.syncFunction(uniformGroup.uniforms, data, offset);\n\n        return true;\n    }\n\n    public updateUniformGroup(uniformGroup: UniformGroup): boolean\n    {\n        if (uniformGroup.isStatic && !uniformGroup._dirtyId) return false;\n        uniformGroup._dirtyId = 0;\n\n        const synced = this.syncUniformGroup(uniformGroup);\n\n        uniformGroup.buffer.update();\n\n        return synced;\n    }\n\n    public destroy(): void\n    {\n        this._syncFunctionHash = null;\n    }\n}\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid';\n\nimport type { BindResource } from '../../gpu/shader/BindResource';\nimport type { Buffer } from './Buffer';\n\n/**\n * A resource that can be bound to a bind group and used in a shader.\n * Whilst a buffer can be used as a resource, this class allows you to specify an offset and size of the buffer to use.\n * This is useful if you have a large buffer and only part of it is used in a shader.\n *\n * This resource, will listen for changes on the underlying buffer and emit a itself if the buffer changes shape.\n * @example\n *\n * const buffer = new Buffer({\n *     data: new Float32Array(1000),\n *    usage: BufferUsage.UNIFORM,\n * });\n * // Create a buffer resource that uses the first 100 bytes of a buffer\n * const bufferResource = new BufferResource({\n *    buffer,\n *    offset: 0,\n *    size: 100,\n * });\n * @memberof rendering\n */\nexport class BufferResource extends EventEmitter<{\n    change: BindResource,\n}> implements BindResource\n{\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n\n    /** a unique id for this uniform group used through the renderer */\n    public readonly uid: number = uid('buffer');\n\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     * @ignore\n     */\n    public readonly _resourceType = 'bufferResource';\n\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     * @ignore\n     */\n    public _touched = 0;\n\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     * @ignore\n     */\n    public _resourceId = uid('resource');\n\n    /** the underlying buffer that this resource is using */\n    public buffer: Buffer;\n    /** the offset of the buffer this resource is using. If not provided, then it will use the offset of the buffer. */\n    public readonly offset: number;\n    /** the size of the buffer this resource is using. If not provided, then it will use the size of the buffer. */\n    public readonly size: number;\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     * @ignore\n     */\n    public readonly _bufferResource = true;\n\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    public destroyed = false;\n\n    /**\n     * Create a new Buffer Resource.\n     * @param options - The options for the buffer resource\n     * @param options.buffer - The underlying buffer that this resource is using\n     * @param options.offset - The offset of the buffer this resource is using.\n     * If not provided, then it will use the offset of the buffer.\n     * @param options.size - The size of the buffer this resource is using.\n     * If not provided, then it will use the size of the buffer.\n     */\n    constructor({ buffer, offset, size }: { buffer: Buffer; offset?: number; size?: number; })\n    {\n        super();\n\n        this.buffer = buffer;\n        this.offset = offset | 0;\n        this.size = size;\n\n        this.buffer.on('change', this.onBufferChange, this);\n    }\n\n    protected onBufferChange(): void\n    {\n        this._resourceId = uid('resource');\n\n        this.emit('change', this);\n    }\n\n    /**\n     * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n     * if you want to destroy it as well, or code will explode\n     * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n     */\n    public destroy(destroyBuffer = false): void\n    {\n        this.destroyed = true;\n\n        if (destroyBuffer)\n        {\n            this.buffer.destroy();\n        }\n\n        this.emit('change', this);\n\n        this.buffer = null;\n    }\n}\n"],"names":["_RenderTarget","constructor","descriptor","arguments","length","undefined","uid","colorTextures","dirtyId","isRoot","_size","Float32Array","_managedColorTextures","defaultOptions","this","stencil","depth","i","push","TextureSource","width","height","resolution","antialias","map","texture","source","colorSource","colorTexture","resize","_resolution","on","onSourceResize","depthStencilTexture","Texture","ensureDepthStencilTexture","size","pixelWidth","pixelHeight","format","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","destroy","off","RenderTarget","textureBit","name","vertex","header","main","fragment","textureBitGl","ensureAttributes","geometry","extractedData","attributes","attribute","attributeData","location","offset","instance","warn","buffers","tempStride","tempStart","j","buffer","getAttributeInfoFromFormat","stride","start","ensureStartAndStride","canvasCache","Map","getCanvasTexture","canvas","options","has","CanvasSource","resource","onDestroy","get","delete","once","set","loopMatrix","col","row","uboSyncFunctionsSTD40","f32","i32","uboSyncFunctionsWGSL","RenderTargetSystem","renderer","rootViewPort","Rectangle","viewport","onRenderTargetChange","SystemRunner","projectionMatrix","Matrix","defaultClearColor","_renderSurfaceToRenderTargetHash","_gpuRenderTargetHash","Object","create","_renderTargetStack","_renderer","finishRenderPass","adaptor","renderTarget","renderStart","_ref","target","clear","clearColor","frame","copyFrom","rootRenderTarget","renderingToScreen","globalThis","HTMLCanvasElement","document","body","contains","isRenderingToScreen","bind","renderSurface","getRenderTarget","didChange","gpuRenderTarget","getGpuRenderTarget","resizeGpuRenderTarget","x","y","pm","flipY","sign","identity","a","d","tx","ty","calculateProjection","startRenderPass","emit","CLEAR","ALL","contextChange","pop","currentRenderTargetData","isTexture","_initRenderTarget","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","Math","min","ensureDepthStencil","key","test","destroyGpuRenderTarget","initGpuRenderTarget","GpuStencilModesToPixi","STENCIL_MODES","NONE","DISABLED","stencilWriteMask","stencilReadMask","RENDERING_MASK_ADD","stencilFront","compare","passOp","stencilBack","RENDERING_MASK_REMOVE","MASK_ACTIVE","CustomRenderPipe","addRenderable","container","instructionSet","renderPipes","batch","break","add","execute","isRenderable","render","executeInstructions","renderGroup","instructions","instructionSize","instruction","renderPipeId","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","RenderGroupPipe","addRenderGroup","globalUniforms","worldTransformMatrix","worldTransform","worldColor","worldColorAlpha","buildInstructions","root","reset","buildStart","blendMode","colorMask","sortableChildren","sortChildren","collectAllRenderablesAdvanced","buildEnd","collectAllRenderables","rendererPipes","globalDisplayStatus","includeInBuild","isSimple","setBlendMode","groupBlendMode","didViewUpdate","children","collectAllRenderablesSimple","effects","effect","pipe","clearList","list","index","collectRenderGroups","out","renderGroupChildren","WHITE_BGR","mixColors","localBGRColor","parentBGRColor","color1","color2","ratio","r1","g1","b1","mixHexColors","tempContainer","Container","UPDATE_BLEND_COLOR_VISIBLE","UPDATE_VISIBLE","UPDATE_COLOR","UPDATE_BLEND","updateRenderGroupTransforms","updateChildRenderGroups","worldAlpha","renderGroupParent","appendFrom","relativeGroupTransform","groupColor","groupAlpha","localTransform","localColor","localAlpha","updateRenderGroupTransform","childrenToUpdate","updateTick","renderGroupDepth","Number","childrenAtDepth","child","parentRenderGroup","relativeRenderGroupDepth","updateTransformAndChildren","updateFlags","updateLocalTransform","parent","_updateFlags","updateColorBlendVisibility","structureDidChange","updateRenderable","groupColorAlpha","localBlendMode","localDisplayStatus","validateRenderables","childrenRenderablesToUpdate","rebuildRequired","validateRenderable","tempMatrix","RenderGroupSystem","transform","isRenderGroup","renderGroups","originalLocalTransform","runOnRender","updateRenderables","upload","uniformBatch","renderEnd","WebGLSystem","WebGPUSystem","CanvasSystem","SpritePipe","_gpuSpriteHash","sprite","_instructionSet","gpuSprite","_getGpuSprite","_didSpriteUpdate","_updateBatchableSprite","addToBatch","batcher","updateElement","_texture","_source","checkAndUpdateTexture","destroyRenderable","batchableSprite","BigPool","return","bounds","_initGPUSprite","BatchableSprite","renderable","roundPixels","_roundPixels","BatcherPipe","state","State","for2d","_batches","_geometries","_adaptor","init","Batcher","BatchGeometry","_activeBatch","_activeGeometry","begin","batchableObject","activeBatch","finish","indexBuffer","setDataWithSize","indexSize","attributeBuffer","float32View","attributeSize","dirty","update","action","MaskFilter","Filter","rest","textureMatrix","TextureMatrix","filterUniforms","UniformGroup","uFilterMatrix","value","uMaskClamp","uClampFrame","uAlpha","gpuProgram","GpuProgram","from","entryPoint","glProgram","GlProgram","resources","uMaskTexture","_textureMatrix","apply","filterManager","input","output","clearMode","calculateSpriteMatrix","uniforms","prepend","mapCoord","applyFilter","tempBounds","Bounds","AlphaMaskEffect","FilterEffect","filters","Sprite","EMPTY","AlphaMaskPipe","_activeMaskStage","mask","maskedContainer","canBundle","renderMaskToTexture","maskContainer","_maskedContainer","renderMask","filterEffect","measurable","getGlobalBounds","ceil","colorTextureSource","filterTexture","TexturePool","getOptimalTexture","minX","minY","maskData","RendererType","WEBGL","filter","returnTexture","ColorMaskPipe","_colorStack","_colorStackIndex","_currentColor","_container","colorStack","currentColor","_mask","setMask","StencilMaskPipe","_maskStackHash","_maskHash","WeakMap","_a","instructionsStart","instructionsLength","renderTargetUid","maskStackIndex","setStencilMode","STENCIL","_BackgroundSystem","clearBeforeRender","_backgroundColor","Color","color","alpha","background","backgroundColor","backgroundAlpha","setAlpha","setValue","colorRgba","toArray","priority","BackgroundSystem","BLEND_MODE_FILTERS","extensions","handle","BlendMode","Error","ref","BlendModePipe","_isAdvanced","_filterHash","_activeBlendMode","_endAdvancedBlendMode","_beginAdvancedBlendMode","_renderableList","renderables","imageTypes","png","jpg","webp","_ExtractSystem","_normalizeOptions","defaults","image","Image","src","base64","defaultImageOptions","quality","toBlob","Promise","resolve","reject","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","generateCanvas","textureGenerator","generateTexture","pixels","pixelInfo","getPixels","download","link","createElement","filename","href","appendChild","click","removeChild","log","console","style","join","ExtractSystem","RenderTexture","tempRect","noColor","GenerateTextureSystem","textureSourceOptions","view","Array","isArray","shared","region","copyTo","getLocalBounds","rectangle","max","translate","updateMipmaps","GlobalUniformSystem","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","currentGlobalUniformData","projectionData","Point","globalUniformData","bindGroup","uniformGroup","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","color32BitToUniform","uWorldColorAlpha","getUniformBindGroup","BindGroup","setResource","_currentGlobalUniformData","isStatic","saidHello","VERSION","HelloSystem","hello","context","webGLVersion","DOMAdapter","getNavigator","userAgent","toLowerCase","indexOf","args","sayHello","_TextureGCSystem","count","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","active","textureGCActive","postrender","run","managedTextures","autoGarbageCollect","_touched","unload","TextureGCSystem","_ViewSystem","deprecation","v8_0_0","screen","createCanvas","transparent","multiView","autoDensity","desiredScreenWidth","desiredScreenHeight","removeView","parentNode","SharedSystems","RendererInitHook","SharedRenderPipes","createUboSyncFunction","uboElements","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","uboElement","data","parsed","uniformParsers","ubo","template","fragmentSrc","Function","uniform","red","UboSystem","_syncFunctionHash","_systemCheck","unsafeEvalSupported","ensureUniformGroup","uniformData","getUniformGroupData","Buffer","layout","usage","BufferUsage","UNIFORM","COPY_DST","_signature","_initUniformGroup","uniformGroupSignature","elements","keys","uniformStructures","createUboElements","syncFunction","_generateUboSync","generateUboSync","syncUniformGroup","uniformGroupData","updateUniformGroup","_dirtyId","synced","BufferResource","EventEmitter","_resourceType","_resourceId","_bufferResource","destroyed","onBufferChange","destroyBuffer"],"sourceRoot":""}